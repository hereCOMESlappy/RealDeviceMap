let map;

let lastUpdateServer = 0;

let lastUpdate = 0;
let isLoading = false;

let pokestopMarkers = [];
let gymMarkers = [];
let pokemonMarkers = [];
let spawnpointMarkers = [];
let cellMarkers = [];

let pokemonFilter = {};
let pokemonFilterNew = {};

let questFilter = {};
let questFilterNew = {};

let raidFilter = {};
let raidFilterNew = {};

let gymFilter = {};
let gymFilterNew = {};

let pokestopFilter = {};
let pokestopFilterNew = {};

let hiddenPokemonIds = [];

let openedPokemon;
let openedPokestop;
let openedGym;
let openedCell;

let showPokestops;
let showQuests;
let showGyms;
let showRaids;
let showPokemon;
let showSpawnpoints;
let showCells;

let avilableForms = [];
let avilableItems = [];
let avilableTileservers = {};
let selectedTileserver = "Default";

let pokemonFilterLoaded = false;
let questFilterLoaded = false;
let raidFilterLoaded = false;
let gymFilterLoaded = false;
let pokestopFilterLoaded = false;

let tileLayer;

$(function() {

    $.getJSON( "/static/data/{{{locale}}}.json", {_: '{{{locale_last_modified}}}'}, function( data ) {
        i18n.translator.add(data);
    });

    avilableForms = JSON.parse('{{{avilable_forms_json}}}');
    avilableItems = JSON.parse('{{{avilable_items_json}}}');
    avilableTileservers = JSON.parse('{{{avilable_tileservers_json}}}');

    loadStorage();

    let avilableTileserverKeys = [];
    for (var avilableTileserverKey in avilableTileservers) {
        avilableTileserverKeys.push(avilableTileserverKey);
    }
    avilableTileserverKeys.sort();
    $('#select-mapstyle').append($('<option>', {
        value: "Default",
        text: "Default",
        selected: "Default" === selectedTileserver,
    }));
    for (var i = 0; i < avilableTileserverKeys.length; i++) {
        let key = avilableTileserverKeys[i];
        if (key !== "Default") {
            $('#select-mapstyle').append($('<option>', {
                value: key,
                text: key,
                selected: key === selectedTileserver,
            }));
        }
    };

    $('#settingsModal').on("show.bs.modal", function () {
        pokemonFilterNew = $.extend(true, {}, pokemonFilter);
        questFilterNew = $.extend(true, {}, questFilter);
        raidFilterNew = $.extend(true, {}, raidFilter);
        gymFilterNew = $.extend(true, {}, gymFilter);
        pokestopFilterNew = $.extend(true, {}, pokestopFilter);

        $('.select-button').each(function (button) {
            manageSelectButton($(this), false);
        });
        $('.configure-button').each(function (button) {
            manageConfigureButton($(this), false);
        });

        if (!pokemonFilterLoaded) {
            pokemonFilterLoaded = true;
            loadPokemonFilter();
        }

        if (!questFilterLoaded) {
            questFilterLoaded = true;
            loadQuestFilter();
        }

        if (!raidFilterLoaded) {
            raidFilterLoaded = true;
            loadRaidFilter();
        }

        if (!gymFilterLoaded) {
            gymFilterLoaded = true;
            loadGymFilter();
        }

        if (!pokestopFilterLoaded) {
            pokestopFilterLoaded = true;
            loadPokestopFilter();
        }

    });

    initMap();

    $('#select-mapstyle').on('change', function() {
        selectedTileserver = this.value;
        store("tileserver", this.value);
        map.removeLayer(tileLayer);

        let scale = "";
        if (L.Browser.retina) {
            scale = "@2x"
        }
        tileLayer = L.tileLayer(avilableTileservers[selectedTileserver]['url'], {
            attribution: avilableTileservers[selectedTileserver]['attribution'],
            minZoom: {{min_zoom}},
            maxZoom: {{max_zoom}},
            scale: scale,
            hq: L.Browser.retina,
        });
        tileLayer.addTo(map);

    });

    // If you see this: Don't tell anyone
    var d = new Date();
    if (d.getMonth() == 11 && d.getDate() >= 24) {
        const snow = '<div class="winter-is-coming">\n' +
            '            <div class="snow snow--near"></div>\n' +
            '            <div class="snow snow--near snow--alt"></div>\n' +
            '            <div class="snow snow--mid"></div>\n' +
            '            <div class="snow snow--mid snow--alt"></div>\n' +
            '            <div class="snow snow--far"></div>\n' +
            '            <div class="snow snow--far snow--alt"></div>\n' +
            '        </div>';
        $('#map').append(snow)
    }

    if ("{{google_analytics_id}}" !== false) {
        window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};
        ga.l=+new Date;
        ga('create', '{{google_analytics_id}}', 'auto');
        ga('send', 'pageview');
    }

    if ("{{google_adsense_id}}" !== false) {
        (adsbygoogle = window.adsbygoogle || []).push({
            google_ad_client: '{{google_adsense_id}}',
            enable_page_level_ads: true
        });
    }

});

// MARK: - Setup

function loadStorage() {

    const selectedTileserverTmp = retrieve('tileserver');
    if (selectedTileserverTmp === undefined) {
        selectedTileserver = 'Default';
    } else {
        if (avilableTileservers[selectedTileserverTmp] === undefined) {
            selectedTileserver = 'Default';
        } else {
            selectedTileserver = selectedTileserverTmp;
        }
    }

    const showGymsValue = retrieve('show_gyms');
    if (showGymsValue === null) {
        store('show_gyms', true);
        showGyms = true;
    } else {
        showGyms = (showGymsValue === 'true');
    }

    const showRaidsValue = retrieve('show_raids');
    if (showRaidsValue === null) {
        store('show_raids', true);
        showRaids = true;
    } else {
        showRaids = (showRaidsValue === 'true');
    }

    const showPokestopsValue = retrieve('show_pokestops');
    if (showPokestopsValue === null) {
        store('show_pokestops', false);
        showPokestops = false;
    } else {
        showPokestops = (showPokestopsValue  === 'true');
    }

    const showQuestsValue = retrieve('show_quests');
    if (showQuestsValue === null) {
        store('show_quests', true);
        showQuests = true;
    } else {
        showQuests = (showQuestsValue  === 'true');
    }

    const showSpawnpointsValue = retrieve('show_spawnpoints');
    if (showSpawnpointsValue === null) {
        store('show_spawnpoints', false);
        showSpawnpoints = false;
    } else {
        showSpawnpoints = (showSpawnpointsValue === 'true');
    }

    const showPokemonValue = retrieve('show_pokemon');
    if (showPokemonValue === null) {
        store('show_pokemon', true);
        showPokemon = true;
    } else {
        showPokemon = (showPokemonValue === 'true');
    }

    const showCellsValue = retrieve('show_cells');
    if (showCellsValue === null) {
        store('show_cells', false);
        showCells = false;
    } else {
        showCells = (showCellsValue === 'true');
    }

    const pokemonFilterValue = retrieve('pokemon_filter');
    if (pokemonFilterValue === null) {
        const defaultPokemonFilter = {};
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultPokemonFilter[i] = {"show": true, "size": "normal"};
        }
        defaultPokemonFilter["iv_and"] = {"on": false, "filter": "0-100"};
        defaultPokemonFilter["iv_or"] = {"on": false, "filter": "0-100"};

        store('pokemon_filter',JSON.stringify(defaultPokemonFilter));
        pokemonFilter = defaultPokemonFilter;
    } else {
        pokemonFilter = JSON.parse(pokemonFilterValue);
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            if (pokemonFilter[i] === undefined) {
                pokemonFilter[i] = {"show": true, "size": "normal"};
            }
        }
        if (pokemonFilter["iv_and"] === undefined) {
            pokemonFilter["iv_and"] = {"on": false, "filter": "0-100"};
        }
        if (pokemonFilter["iv_or"] === undefined) {
            pokemonFilter["iv_or"] = {"on": false, "filter": "0-100"};
        }
        store('pokemon_filter', JSON.stringify(pokemonFilter));
    }

    const questFilterValue = retrieve('quest_filter');
    if (questFilterValue === null) {
        const defaultQuestFilter = {};
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultQuestFilter["p" + i] = {"show": true, "size": "normal"};
        }
        $.each(avilableItems, function (index, itemId) {
            defaultQuestFilter["i" + itemId] = {"show": true, "size": "normal"};
        });

        store('quest_filter', JSON.stringify(defaultQuestFilter));
        questFilter = defaultQuestFilter;
    } else {
        questFilter = JSON.parse(questFilterValue);
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            if (questFilter["p" + i] === undefined) {
                questFilter["p" + i] = {"show": true, "size": "normal"};
            }
        }
        $.each(avilableItems, function (index, itemId) {
            if (questFilter["i" + itemId] === undefined) {
                questFilter["i" + itemId] = {"show": true, "size": "normal"};
            }
        });
        store('quest_filter', JSON.stringify(questFilter));
    }

    const raidFilterValue = retrieve('raid_filter');
    if (raidFilterValue === null) {
        const defaultRaidFilter = {};
        let i;
        for (i = 1; i <= 5; i++) {
            if (defaultRaidFilter["l" + i] === undefined) {
                defaultRaidFilter["l" + i] = {"show": true, "size": "normal"};
            }
        }
        if (defaultRaidFilter["hatched"] === undefined) {
            defaultRaidFilter["hatched"] = {"show": true, "size": "normal"};
        }

        store('raid_filter', JSON.stringify(defaultRaidFilter));
        raidFilter = defaultRaidFilter;
    } else {
        raidFilter = JSON.parse(raidFilterValue);
        let i;
        for (i = 1; i <= 5; i++) {
            if (raidFilter["l" + i] === undefined) {
                raidFilter["l" + i] = {"show": true, "size": "normal"};
            }
        }
        if (raidFilter["hatched"] === undefined) {
            raidFilter["hatched"] = {"show": true, "size": "normal"};
        }
    }

    const gymFilterValue = retrieve('gym_filter');
    if (gymFilterValue === null) {
        const defaultGymFilter = {};
        let i;
        for (i = 0; i <= 3; i++) {
            if (defaultGymFilter["t" + i] === undefined) {
                defaultGymFilter["t" + i] = {"show": true, "size": "normal"};
            }
        }
        if (defaultGymFilter["ex"] === undefined) {
            defaultGymFilter["ex"] = {"show": false, "size": "normal"};
        }
        let j;
        for (j = 0; j <= 6; j++) {
            if (defaultGymFilter["s" + j] === undefined) {
                defaultGymFilter["s" + j] = {"show": true, "size": "normal"};
            }
        }

        store('gym_filter', JSON.stringify(defaultGymFilter));
        gymFilter = defaultGymFilter;
    } else {
        gymFilter = JSON.parse(gymFilterValue);
        let i;
        for (i = 0; i <= 3; i++) {
            if (gymFilter["t" + i] === undefined) {
                gymFilter["t" + i] = {"show": true, "size": "normal"};
            }
        }
        if (gymFilter["ex"] === undefined) {
            gymFilter["ex"] = {"show": false, "size": "normal"};
        }
        let j;
        for (j = 0; j <= 6; j++) {
            if (gymFilter["s" + j] === undefined) {
                gymFilter["s" + j] = {"show": true, "size": "normal"};
            }
        }
    }

    const pokestopFilterValue = retrieve('pokestop_filter');
    if (pokestopFilterValue === null) {
        const defaultPokestopFilter = {};
        if (defaultPokestopFilter["lured"] === undefined) {
            defaultPokestopFilter["lured"] = {"show": false, "size": "normal"};
        }
        for (var i = 1; i < 5; i++) {
            if (defaultPokestopFilter["l" + i] === undefined) {
                defaultPokestopFilter["l" + i] = {"show": true, "size": "normal"};
            }
        }

        store('pokestop_filter', JSON.stringify(defaultPokestopFilter));
        pokestopFilter = defaultPokestopFilter;
    } else {
        pokestopFilter = JSON.parse(pokestopFilterValue);
        if (pokestopFilter["lured"] === undefined) {
            pokestopFilter["lured"] = {"show": false, "size": "normal"};
        }
        for (var i = 1; i < 5; i++) {
            if (pokestopFilter["l" + i] === undefined) {
                pokestopFilter["l" + i] = {"show": true, "size": "normal"};
            }
        }
    }
}

function initMap() {

	map = L.map('map').setView([{{start_lat}}, {{start_lon}}], {{start_zoom}});

	let scale = "";
	if (L.Browser.retina) {
        scale = "@2x"
    }
    tileLayer = L.tileLayer(avilableTileservers[selectedTileserver]['url'], {
		attribution: avilableTileservers[selectedTileserver]['attribution'],
		minZoom: {{min_zoom}},
		maxZoom: {{max_zoom}},
        scale: scale,
        hq: L.Browser.retina,
	});
    tileLayer.addTo(map);

	const customControlLocation = L.Control.extend({
		options: {
			position: 'topleft'
		},
		onAdd: function (map) {
            let container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

			container.innerHTML = '<a href="#"><img src="/static/svg/location.svg" style="width: 21px; height: 21px; class="center-block;"/></a>';

			container.onclick = function(){
                map.locate({setView: true, maxZoom: 16});
			};
			return container;
		}
	});
	map.addControl(new customControlLocation());

	$('#reset-pokemon-filter').on('click', function(event) {
        const defaultPokemonFilter = [];
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultPokemonFilter[i] = {"show": true, "size": "normal"};
        }
        defaultPokemonFilter["iv_and"] = {"on": false, "filter": "0-100"};
        defaultPokemonFilter["iv_or"] = {"on": false, "filter": "0-100"};

        store('pokemon_filter',JSON.stringify(defaultPokemonFilter));
        pokemonFilterNew = defaultPokemonFilter;

        $('#table-filter-pokemon').DataTable().rows().invalidate('data').draw(false);
    });

    $('#disable-all-pokemon-filter').on('click', function(event) {
        const defaultPokemonFilter = [];
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultPokemonFilter[i] = {"show": false, "size": pokemonFilterNew[i]["size"],  "filter": pokemonFilterNew[i]["filter"]};
        }
        defaultPokemonFilter["iv_and"] = {"on": false, "filter": pokemonFilterNew["iv_and"]["filter"]};
        defaultPokemonFilter["iv_or"] = {"on": false, "filter": pokemonFilterNew["iv_or"]["filter"]};


        store('pokemon_filter',JSON.stringify(defaultPokemonFilter));
        pokemonFilterNew = defaultPokemonFilter;

        $('#table-filter-pokemon').DataTable().rows().invalidate('data').draw(false);
    });

    $('#reset-quest-filter').on('click', function(event) {
        const defaultQuestFilter = {};
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultQuestFilter["p" + i] = {"show": true, "size": "normal"};
        }
        $.each(avilableItems, function (index, itemId) {
            defaultQuestFilter["i" + itemId] = {"show": true, "size": "normal"};
        });

        store('quest_filter', JSON.stringify(defaultQuestFilter));
        questFilterNew = defaultQuestFilter;

        $('#table-filter-quest').DataTable().rows().invalidate('data').draw(false);
    });

    $('#disable-all-quest-filter').on('click', function(event) {
        const defaultQuestFilter = {};
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultQuestFilter["p" + i] = {"show": false, "size": questFilterNew["p" + i]["size"]};
        }
        $.each(avilableItems, function (index, itemId) {
            defaultQuestFilter["i" + itemId] = {"show": false, "size": questFilterNew["i" + itemId]["size"]};
        });

        store('quest_filter', JSON.stringify(defaultQuestFilter));
        questFilterNew = defaultQuestFilter;

        $('#table-filter-quest').DataTable().rows().invalidate('data').draw(false);
    });

    $('#reset-raid-filter').on('click', function(event) {
        const defaultRaidFilter = {};
        let i;
        for (i = 1; i <= 5; i++) {
            defaultRaidFilter["l" + i] = {"show": true, "size": "normal"};
        }
        defaultRaidFilter["hatched"] = {"show": true, "size": "normal"};

        store('raid_filter', JSON.stringify(defaultRaidFilter));
        raidFilterNew = defaultRaidFilter;

        $('#table-filter-raid').DataTable().rows().invalidate('data').draw(false);
    });

    $('#disable-all-raid-filter').on('click', function(event) {
        const defaultRaidFilter = {};
        let i;
        for (i = 1; i <= 5; i++) {
            defaultRaidFilter["l" + i] = {"show": false, "size": raidFilterNew["l" + i]["size"]};
        }
        defaultRaidFilter["hatched"] = {"show": false, "size": raidFilterNew["hatched"]["size"]};

        store('raid_filter', JSON.stringify(defaultRaidFilter));
        raidFilterNew = defaultRaidFilter;

        $('#table-filter-raid').DataTable().rows().invalidate('data').draw(false);
    });

    $('#reset-gym-filter').on('click', function(event) {
        const defaultGymFilter = {};
        let i;
        for (i = 0; i <= 3; i++) {
            defaultGymFilter["t" + i] = {"show": true, "size": gymFilterNew["t" + i]["size"]};
        }
        defaultGymFilter["ex"] = {"show": false, "size": "normal"};
        let j;
        for (j = 0; j <= 6; j++) {
            defaultGymFilter["s" + j] = {"show": true, "size": gymFilterNew["s" + j]["size"]};
        }

        store('gym_filter', JSON.stringify(defaultGymFilter));
        gymFilterNew = defaultGymFilter;

        $('#table-filter-gym').DataTable().rows().invalidate('data').draw(false);
    });

    $('#disable-all-gym-filter').on('click', function(event) {
        const defaultGymFilter = {};
        let i;
        for (i = 0; i <= 3; i++) {
            defaultGymFilter["t" + i] = {"show": false, "size": gymFilterNew["t" + i]["size"]};
        }
        defaultGymFilter["ex"] = {"show": false, "size": gymFilterNew["ex"]["size"]}
        let j;
        for (j = 0; j <= 6; j++) {
            defaultGymFilter["s" + j] = {"show": false, "size": gymFilterNew["s" + j]["size"]};
        }

        store('gym_filter', JSON.stringify(defaultGymFilter));
        gymFilterNew = defaultGymFilter;

        $('#table-filter-gym').DataTable().rows().invalidate('data').draw(false);
    });

    $('#reset-pokestop-filter').on('click', function(event) {
        const defaultPokestopFilter = {};
        defaultPokestopFilter["lured"] = {"show": false, "size": pokestopFilterNew["lured"]["size"]};
        for (var i = 1; i < 5; i++) {
            defaultPokestopFilter["l" + i] = {"show": true, "size": pokestopFilterNew["l" + i]["size"]};
        }
        
        store('pokestop_filter', JSON.stringify(defaultPokestopFilter));
        pokestopFilterNew = defaultPokestopFilter;

        $('#table-filter-pokestop').DataTable().rows().invalidate('data').draw(false);
    });

    $('#disable-all-pokestop-finder').on('click', function(event) {
        const defaultPokestopFilter = {};
        defaultPokestopFilter["lured"] = {"show": false, "size": pokestopFilterNew["lured"]["size"]};
        for (var i = 1; i < 5; i++) {
            defaultPokestopFilter["l" + i] = {"show": false, "size": pokestopFilterNew["l" + i]["size"]};
        }

        store('pokestop_filter', JSON.stringify(defaultPokestopFilter));
        pokestopFilterNew = defaultPokestopFilter;

        $('#table-filter-pokestop').DataTable().rows().invalidate('data').draw(false);
    });

	$('#saveSettings').on('click', function(event) {


		$(this).toggleClass('active');

        const newShowGyms = $('#show-gyms').hasClass('active')
		const newShowRaids = $('#show-raids').hasClass('active');
		const newShowPokestops = $('#show-pokestops').hasClass('active');
        const newShowQuests= $('#show-quests').hasClass('active');
        const newShowPokemon = $('#show-pokemon').hasClass('active');
        const newShowSpawnpoints = $('#show-spawnpoints').hasClass('active');
        const newShowCells = $('#show-cells').hasClass('active');

        const ts = Math.round((new Date()).getTime() / 1000);

        if (newShowGyms !== showGyms && newShowGyms === false) {
            const newGymMarkers = [];
			$.each(gymMarkers, function (index, gym) {
				if (newShowRaids && gym.raid_end_timestamp >= ts) {
					newGymMarkers.push(gym);
				} else {
					map.removeLayer(gym.marker);
				}
			});

			gymMarkers = newGymMarkers;
		}
        if (newShowPokemon !== showPokemon) {
            $.each(pokemonMarkers, function (index, pokemon) {
                map.removeLayer(pokemon.marker);
            });
            pokemonMarkers = [];
        }
		if (newShowRaids !== showRaids) {
			$.each(gymMarkers, function (index, gym) {
				map.removeLayer(gym.marker);
			});
			gymMarkers = [];
		}
		if (newShowPokestops !== showPokestops && newShowPokestops === false) {
			$.each(pokestopMarkers, function (index, pokestop) {
				map.removeLayer(pokestop.marker);
			});
			pokestopMarkers = [];
		}
        if (newShowRaids !== showRaids) {
            $.each(pokestopMarkers, function (index, pokestop) {
                map.removeLayer(pokestop.marker);
            });
            pokestopMarkers = [];
        }
		if (newShowQuests !== showQuests) {
            $.each(pokestopMarkers, function (index, pokestop) {
                map.removeLayer(pokestop.marker);
            });
            pokestopMarkers = [];
		}
        if (newShowSpawnpoints !== showSpawnpoints && newShowSpawnpoints === false) {
            $.each(spawnpointMarkers, function (index, spawnpoint) {
                map.removeLayer(spawnpoint.marker);
            });
            spawnpointMarkers = [];
        }
        if (newShowCells !== showCells && newShowCells === false) {
            $.each(cellMarkers, function (index, cell) {
                map.removeLayer(cell.marker);
            });
            cellMarkers = [];
        }

        pokemonFilter = pokemonFilterNew;
        //const pokemonFilterOld = $.extend(true, {}, pokemonFilter);
        const newPokemonMarkers = [];
        $.each(pokemonMarkers, function (index, pokemon) {
            map.removeLayer(pokemon.marker);
            /*if ((pokemonFilterOld[pokemon.pokemon_id]["show"] !== pokemonFilter[pokemon.pokemon_id]["show"]) ||
                !(pokemonFilterOld[pokemon.pokemon_id]["size"].localeCompare(pokemonFilter[pokemon.pokemon_id]["size"]))) {

                map.removeLayer(pokemon.marker);
                if (matchesPokemonFilter(pokemon.pokemon_id)) {
                    pokemon.marker = getPokemonMarker(pokemon, ts);
                    newPokemonMarkers.push(pokemon);
                    pokemon.marker.addTo(map);
                }
            } else {
                newPokemonMarkers.push(pokemon);
            }*/
        });
        pokemonMarkers = newPokemonMarkers;

        questFilter = questFilterNew;
        //const questFilterOld = $.extend(true, {}, questFilter);
        const newPokestopMarkers = [];
        $.each(pokestopMarkers, function (index, pokestop) {
            map.removeLayer(pokestop.marker);
            /*if ((pokemonFilterOld[pokemon.pokemon_id]["show"] !== pokemonFilter[pokemon.pokemon_id]["show"]) ||
                !(pokemonFilterOld[pokemon.pokemon_id]["size"].localeCompare(pokemonFilter[pokemon.pokemon_id]["size"]))) {

                map.removeLayer(pokemon.marker);
                if (matchesPokemonFilter(pokemon.pokemon_id)) {
                    pokemon.marker = getPokemonMarker(pokemon, ts);
                    newPokemonMarkers.push(pokemon);
                    pokemon.marker.addTo(map);
                }
            } else {
                newPokemonMarkers.push(pokemon);
            }*/
        });
        pokestopMarkers = newPokestopMarkers;

        gymFilter = gymFilterNew;
        pokestopFilter = pokestopFilterNew;
        raidFilter = raidFilterNew;
        //const raidFilterOld = $.extend(true, {}, raidFilter);
        const newGymMarkers = [];
        $.each(gymMarkers, function(index, gym) {
            map.removeLayer(gym.marker);

        });
        gymMarkers = newGymMarkers;

		showGyms = newShowGyms;
		store('show_gyms', newShowGyms);
		showRaids = newShowRaids;
		store('show_raids', newShowRaids);
		showPokestops = newShowPokestops;
		store('show_pokestops', newShowPokestops);
        showQuests = newShowQuests;
        store('show_quests', newShowQuests);
		showPokemon = newShowPokemon;
		store('show_pokemon', newShowPokemon);
        showSpawnpoints = newShowSpawnpoints;
        store('show_spawnpoints', newShowSpawnpoints);
        store('pokemon_filter',JSON.stringify(pokemonFilter));
        store('quest_filter',JSON.stringify(questFilter));
        store('raid_filter',JSON.stringify(raidFilter));
        store('gym_filter', JSON.stringify(gymFilter));
        store('pokestop_filter', JSON.stringify(pokestopFilter));
        store('show_cells', newShowCells);
        showCells = newShowCells;

		lastUpdateServer = 0;
		loadData();

		$('#settingsModal').modal('hide');
	});

    const customControlSettings = L.Control.extend({
		options: {
			position: 'topleft'
		},
		onAdd: function (map) {
            const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

			container.innerHTML = '<a href="#"><img src="/static/svg/settings.svg" style="width: 21px; height: 21px; class="center-block;"/></a>';

			container.onclick = function(){

				if (retrieve('show_gyms') == 'true') {
                    $('#show-gyms').addClass('active');
                    $('#hide-gyms').removeClass('active');
				} else {
                    $('#hide-gyms').addClass('active');
                    $('#show-gyms').removeClass('active');
				}

                if (retrieve('show_raids') == 'true') {
                    $('#show-raids').addClass('active');
                    $('#hide-raids').removeClass('active');
                } else {
                    $('#hide-raids').addClass('active');
                    $('#show-raids').removeClass('active');
                }

                if (retrieve('show_pokestops') == 'true') {
                    $('#show-pokestops').addClass('active');
                    $('#hide-pokestops').removeClass('active');
                } else {
                    $('#hide-pokestops').addClass('active');
                    $('#show-pokestops').removeClass('active');
                }

                if (retrieve('show_quests') == 'true') {
                    $('#show-quests').addClass('active');
                    $('#hide-quests').removeClass('active');
                } else {
                    $('#hide-quests').addClass('active');
                    $('#show-quests').removeClass('active');
                }

                if (retrieve('show_pokemon') == 'true') {
                    $('#show-pokemon').addClass('active');
                    $('#hide-pokemon').removeClass('active');
                } else {
                    $('#hide-pokemon').addClass('active');
                    $('#show-pokemon').removeClass('active');
                }

                if (retrieve('show_spawnpoints') == 'true') {
                    $('#show-spawnpoints').addClass('active');
                    $('#hide-spawnpoints').removeClass('active');
                } else {
                    $('#hide-spawnpoints').addClass('active');
                    $('#show-spawnpoints').removeClass('active');
                }

                if (retrieve('show_cells') == 'true') {
                    $('#show-cells').addClass('active');
                    $('#hide-cells').removeClass('active');
                } else {
                    $('#hide-cells').addClass('active');
                    $('#show-cells').removeClass('active');
                }

				$('#settingsModal').modal('show');
			};

			return container;
		}
	});
	map.addControl(new customControlSettings());

	map.on('zoomend', function() {
		lastUpdateServer = 0;
		loadData();
	});

	map.on('dragend', function() {
		lastUpdateServer = 0;
		loadData();
	});

	loadData();
	setInterval(loadData, 5000);
	setInterval(updateOpenedPopupLoop, 1000);
    setInterval(updateCellsLoop, 10000);
}

// MARK: - Date Loading

function loadData() {

	if (isLoading || new Date() - lastUpdate < 100) {
		return
	}
	isLoading = true;
	lastUpdate = new Date();

	const bounds = map.getBounds();

    const pokemonFilterExclude = [];
    const pokemonFilterIV = {};
    if (showPokemon) {
    	let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            if (pokemonFilter[i]["show"] === false) {
                pokemonFilterExclude.push(i);
            }
            if (pokemonFilter[i]["show"] === "filter") {
                pokemonFilterIV[i] = pokemonFilter[i]['filter'].replace(/\s/g,'');
            }
        }


        if (pokemonFilter['iv_and']['on'] === true) {
            pokemonFilterIV['and'] = pokemonFilter['iv_and']['filter'].replace(/\s/g,'');
        }

        if (pokemonFilter['iv_or']['on'] === true) {
            pokemonFilterIV['or'] = pokemonFilter['iv_or']['filter'].replace(/\s/g,'');
        }

    }

    const questFilterExclude = [];
    if (showQuests) {
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            if (questFilter["p" + i]["show"] === false) {
                questFilterExclude.push("p" + i);
            }
        }
        $.each(avilableItems, function (index, itemId) {
            if (questFilter["i" + itemId]["show"] === false) {
                questFilterExclude.push("i" + itemId);
            }
        });
    }
    
    const raidFilterExclude = [];
    if (showRaids) {
        let i;
        for (i = 1; i <= 5; i++) {
            if (raidFilter["l" + i]["show"] === false) {
                raidFilterExclude.push("l" + i);
            }
        }
        if (raidFilter["hatched"]["show"] !== false) {
            raidFilterExclude.push("hatched");
        }
    }

    const gymFilterExclude = [];
    if (showGyms || showRaids) {
        let i;
        for (i = 0; i <= 3; i++) {
            if (gymFilter["t" + i]["show"] === false) {
                gymFilterExclude.push("t" + i);
            }
        }
        if (gymFilter["ex"]["show"] !== false) {
            gymFilterExclude.push("ex");
        }
        let j;
        for (j = 0; j <= 6; j++) {
            if (gymFilter["s" + j]["show"] === false) {
                gymFilterExclude.push("s" + j);
            }
        }
    }

    const pokestopFilterExclude = [];
    if (showPokestops) {
        if (pokestopFilter["lured"]["show"] !== false) {
            pokestopFilterExclude.push("lured");
        }
        for (var i = 1; i < 5; i++) {
            if (pokestopFilter["l" + i]["show"] === false) {
                pokestopFilterExclude.push("l" + i);
            }
        }
    }

    const data = {
        '_': Math.round((new Date()).getTime() / 1000),
		'min_lat': bounds._southWest.lat,
		'max_lat': bounds._northEast.lat,
		'min_lon': bounds._southWest.lng,
		'max_lon': bounds._northEast.lng,
		'show_gyms': showGyms,
		'show_raids': showRaids,
		'show_pokestops': showPokestops,
        'show_quests': showQuests,
        'show_pokemon': showPokemon,
		'pokemon_filter_exclude': JSON.stringify(pokemonFilterExclude),
        'quest_filter_exclude': JSON.stringify(questFilterExclude),
        'pokemon_filter_iv': JSON.stringify(pokemonFilterIV),
        'raid_filter_exclude': JSON.stringify(raidFilterExclude),
        'gym_filter_exclude': JSON.stringify(gymFilterExclude),
        'pokestop_filter_exclude': JSON.stringify(pokestopFilterExclude),
        'show_spawnpoints': showSpawnpoints,
        'show_cells': showCells,
        'last_update': lastUpdateServer,
        '_csrf': "{{csrf}}"
	};

	$.ajax({
		url: '/api/get_data',
		data: data,
        type: "post",
		success: function (data) {
			const gyms = data.data.gyms;
            let ts = Math.round((new Date()).getTime() / 1000);
			$.each(gyms, function (index, gym) {
				if (showGyms || (showRaids && gym.raid_end_timestamp >= ts)) {
					if (gym.updated > lastUpdateServer) {
						lastUpdateServer = gym.updated;
					}
                    const oldGym = gymMarkers.find(function (value) {
						return gym.id === value.id;
					});

					if (gym.team_id === null) {
						gym.team_id = 0;
					}

					if (oldGym === undefined) {
						const marker = getGymMarker(gym, ts);
						gym.marker = marker;
						gymMarkers.push(gym);
						gym.marker.addTo(map);
						if (gym.raid_end_timestamp >= ts) {
							startRaidTimer(gym, ts);
							gym.raidTimerSet = true;
						} else {
							gym.raidTimerSet = false;
						}
					} else {

                        oldGym.updated = gym.updated;
                        oldGym.last_modified_timestamp = gym.last_modified_timestamp;

                        if (
							oldGym.availble_slots !== gym.availble_slots ||
							oldGym.team_id !== gym.team_id ||
							oldGym.raid_end_timestamp != gym.raid_end_timestamp ||
							oldGym.raid_pokemon_id != gym.raid_pokemon_id
						) {
							oldGym.availble_slots = gym.availble_slots;
							oldGym.team_id = gym.team_id;
							oldGym.raid_end_timestamp = gym.raid_end_timestamp;
							oldGym.raid_battle_timestamp = gym.raid_battle_timestamp;
							oldGym.raid_spawn_timestamp = gym.raid_spawn_timestamp;
							oldGym.raid_pokemon_id = gym.raid_pokemon_id;
                            oldGym.raid_pokemon_form = gym.raid_pokemon_form;
                            oldGym.raid_pokemon_cp = gym.raid_pokemon_cp;
                            oldGym.raid_pokemon_move_1 = gym.raid_pokemon_move_1;
                            oldGym.raid_pokemon_move_2 = gym.raid_pokemon_move_2;
							oldGym.raid_level = gym.raid_level;
                            oldGym.raid_is_exclusive = gym.raid_is_exclusive;
							oldGym.marker.setIcon(getGymMarkerIcon(oldGym, ts));
							if (oldGym.raid_end_timestamp >= ts && !oldGym.raidTimerSet) {
								startRaidTimer(oldGym, ts);
								oldGym.raidTimerSet = true;
							}
						}
					}
				}
			});

			const pokestops = data.data.pokestops;
			ts = Math.round((new Date()).getTime() / 1000);
            $.each(pokestops, function (index, pokestop) {
                if (showPokestops || (showQuests && pokestop.quest_type !== null)) {

					if (pokestop.updated > lastUpdateServer) {
						lastUpdateServer = pokestop.updated;
					}
                    const oldPokestop = pokestopMarkers.find(function (value) {
						return pokestop.id === value.id;
					});

					if (pokestop.lure_expire_timestamp === null) {
						pokestop.lure_expire_timestamp = 0;
					}

					if (oldPokestop === undefined) {
						pokestop.marker = getPokestopMarker(pokestop, ts);
						pokestopMarkers.push(pokestop);
                        pokestop.marker.addTo(map);
						if (pokestop.lure_expire_timestamp >= ts) {
							pokestop.willUpdate = true;
							startPokestopTimer(pokestop, ts)
						} else {
							pokestop.willUpdate = false
						}
					} else {
						if (oldPokestop.lure_expire_timestamp !== pokestop.lure_expire_timestamp) {
							oldPokestop.lure_expire_timestamp = pokestop.lure_expire_timestamp;
                            oldPokestop.lure_id = pokestop.lure_id;
							oldPokestop.marker.setIcon(getPokestopMarkerIcon(pokestop, ts));
						}

                        oldPokestop.updated = pokestop.updated;
                        oldPokestop.last_modified_timestamp = pokestop.last_modified_timestamp;

                        if (oldPokestop.quest_type !== pokestop.quest_type) {
							oldPokestop.quest_type = pokestop.quest_type;
							oldPokestop.quest_target = pokestop.quest_target;
							oldPokestop.quest_template = pokestop.quest_template;
							oldPokestop.quest_conditions = pokestop.quest_conditions;
							oldPokestop.quest_rewards = pokestop.quest_rewards;
							oldPokestop.quest_timestamp = pokestop.quest_timestamp;
							oldPokestop.marker.setIcon(getPokestopMarkerIcon(pokestop, ts));
						}
						if (oldPokestop.willUpdate === false && oldPokestop.lure_expire_timestamp >= ts) {
							oldPokestop.willUpdate = true;
							startPokestopTimer(oldPokestop, ts)
						}
					}
				}


			});

			const pokemon = data.data.pokemon;
            ts = Math.round((new Date()).getTime() / 1000);
            $.each(pokemon, function (index, pokemon) {
				if (showPokemon && pokemon.expire_timestamp >= ts /*&& matchesPokemonFilter(pokemon.pokemon_id)*/ && !hiddenPokemonIds.includes(pokemon.id)) {
					if (pokemon.updated > lastUpdateServer) {
						lastUpdateServer = pokemon.updated;
					}
                    const oldPokemon = pokemonMarkers.find(function (value) {
						return pokemon.id === value.id;
					});

					if (oldPokemon === undefined) {
						if (pokemon.pokestop_id !== null && pokemon.spawn_id === null) {
							var latOffset = Math.random() * 0.0002 - 0.0001;
							if (latOffset >= 0) {
								latOffset += 0.00005;
							} else {
								latOffset -= 0.00005;
							}
							var lonOffset = Math.random() * 0.0002 - 0.0001;
							if (lonOffset >= 0) {
								lonOffset += 0.00005;
							} else {
								lonOffset -= 0.00005;
							}
							pokemon.lat += latOffset;
							pokemon.lon += + lonOffset;
						}

					    pokemon.marker = getPokemonMarker(pokemon, ts);
					    pokemonMarkers.push(pokemon);
					    startDespawnTimer(pokemon, ts);
					    pokemon.marker.addTo(map);
					} else {
						if (oldPokemon.expire_timestamp !== pokemon.expire_timestamp){
							oldPokemon.expire_timestamp = pokemon.expire_timestamp;
						}
                        if (oldPokemon.atk_iv !== pokemon.atk_iv){
                            oldPokemon.atk_iv = pokemon.atk_iv
                            oldPokemon.def_iv = pokemon.def_iv
                            oldPokemon.sta_iv = pokemon.sta_iv
                            oldPokemon.cp = pokemon.cp
                            oldPokemon.weight = pokemon.weight
                            oldPokemon.size = pokemon.size
                            oldPokemon.move_1 = pokemon.move_1
                            oldPokemon.move_2 = pokemon.move_2
                            oldPokemon.level = pokemon.level
						}
                        if (oldPokemon.updated !== pokemon.updated){
                            oldPokemon.updated = pokemon.updated;
                        }

                        if (hiddenPokemonIds.includes(oldPokemon.id)) {
                            map.removeLayer(oldPokemon.marker);
                        }
					}
				}


			});

            const spawnpoints = data.data.spawnpoints;
            $.each(spawnpoints, function (index, spawnpoint) {
                if (showSpawnpoints) {
                    if (spawnpoint.updated > lastUpdateServer) {
                        lastUpdateServer = spawnpoint.updated;
                    }
                    const oldSpawnpoint = spawnpointMarkers.find(function (value) {
                        return spawnpoint.lat === value.lat && spawnpoint.lon === value.lon;
                    });

                    if (oldSpawnpoint === undefined) {
                        spawnpoint.marker = getSpawnpointMarker(spawnpoint, ts);
                        spawnpointMarkers.push(spawnpoint);
                        spawnpoint.marker.addTo(map);
                    }
                }
            });

            const cells = data.data.cells;
            $.each(cells, function (index, cell) {
                if (showCells) {
                    if (cell.updated > lastUpdateServer) {
                        lastUpdateServer = cell.updated;
                    }
                    const oldCell = cellMarkers.find(function (value) {
                        return cell.id === value.id ;
                    });

                    if (oldCell === undefined) {
                        cell.marker = getCellMarker(cell, ts);
                        cellMarkers.push(cell);
                        cell.marker.addTo(map);
                    } else {
                        oldCell.updated = cell.updated;
                        oldCell.marker.setStyle(getCellStyle(cell, ts));
                    }
                }
            });

            lastUpdate = new Date();
			isLoading = false;
		}
	});
}

// MARK: - Filters

//function matchesPokemonFilter(pokemonId) {
//	return pokemonFilter[pokemonId]["show"] === true ||;
//}

function getPokemonSize(pokemonId) {
    const size = pokemonFilter[pokemonId]["size"];
    if (size === "small") {
    	return 30;
	} else if (size === "large") {
    	return 55;
    } else if (size === "huge") {
        return 75;
    } else {
    	return 40;
	}
}

function getPokemonIndex(pokemonId) {
    const size = pokemonFilter[pokemonId]["size"];
    if (size === "small") {
        return 1;
    } else if (size === "large") {
        return 3;
    } else if (size === "huge") {
        return 4;
    } else {
        return 2;
    }
}

function getQuestSize(questId) {
    if (questFilter[questId] === undefined || questFilter[questId]["size"] === undefined) {
        return 30;
    }
    const size = questFilter[questId]["size"];
    if (size === "small") {
        return 20;
    } else if (size === "large") {
        return 45;
    } else if (size === "huge") {
        return 65;
    } else {
        return 30;
    }
}

function getQuestIndex(questId) {
    if (questFilter[questId] === undefined || questFilter[questId]["size"] === undefined) {
        return 0;
    }
    const size = questFilter[questId]["size"];
    if (size === "small") {
        return 1;
    } else if (size === "large") {
        return 3;
    } else if (size === "huge") {
        return 4;
    } else {
        return 2;
    }
}

function getGymSize(teamId) {
    const size = gymFilter["t" + teamId]["size"];
    if (size === "small") {
        return 30;
    } else if (size == "large") {
        return 55;
    } else if (size === "huge") {
        return 75;
    } else {
        return 40;
    }
}

function getRaidSize(id) {
    const size = raidFilter[id]["size"];
    if (size === "small") {
        return 30;
    } else if (size == "large") {
        return 55;
    } else if (size === "huge") {
        return 75;
    } else {
        return 40;
    }
}

function getPokestopSize(lureId) {
    var lureIconId = getLureIconId(lureId);
    const size = pokestopFilter["l" + lureIconId]["size"];
    if (size === "small") {
        return 20;
    } else if (size == "large") {
        return 45;
    } else if (size === "huge") {
        return 65;
    } else {
        return 30;
    }
}

// MARK: - Local Storage

function store(name, value) {
    localStorage.setItem(name, value);
}

function retrieve(name) {
    return localStorage.getItem(name);
}

// MARK: - Timers

function startDespawnTimer(pokemon, ts) {
	setTimeout(
		function() {
            const ts2 = Math.round((new Date()).getTime() / 1000);
            const realPokemon = pokemonMarkers.find(function (value) {
				return pokemon.id === value.id;
			});
			if (realPokemon === undefined) {
				return;
			}
			if (ts2 +1 >= realPokemon.expire_timestamp) {
				pokemonMarkers = pokemonMarkers.filter(function( obj ) {
					return obj.id !== realPokemon.id;
				});
			} else {
				return startDespawnTimer(realPokemon, ts2);
			}

			map.removeLayer(realPokemon.marker);
		}, (pokemon.expire_timestamp - ts) * 1000);
}

function startRaidTimer(gym, ts) {
	setTimeout(
		function() {
			const ts2 = Math.round((new Date()).getTime() / 1000);
            const realGym = gymMarkers.find(function (value) {
				return gym.id === value.id;
			});
			if (realGym === undefined) {
				return;
			}
			realGym.raidTimerSet = false;

			if (!showGyms) {
				gymMarkers = gymMarkers.filter(function( obj ) {
					return obj.id !== realGym.id;
				});
				map.removeLayer(realGym.marker);
			} else {
				realGym.marker.setIcon(getGymMarkerIcon(realGym, ts2 + 1));
			}

		}, (gym.raid_end_timestamp - ts) * 1000);

	setTimeout(
		function() {
            const ts2 = Math.round((new Date()).getTime() / 1000);
            const realGym = gymMarkers.find(function (value) {
				return gym.id === value.id;
			});
			if (realGym === undefined) {
				return;
			}
			realGym.marker.setIcon(getGymMarkerIcon(realGym, ts2 + 1));
		}, (gym.raid_battle_timestamp - ts) * 1000);
}

function startPokestopTimer(pokestop, ts) {
    setTimeout(
		function() {
            const ts2 = Math.round((new Date()).getTime() / 1000);
            const realPokestop = pokestopMarkers.find(function (value) {
				return pokestop.id === value.id;
			});
			if (realPokestop === undefined) {
				return;
			}
			if (pokestop.lure_expire_timestamp - 10 >= ts2) {
                startPokestopTimer(realPokestop, ts2);
			} else {
                realPokestop.willUpdate = false;
				realPokestop.marker.setIcon(getPokestopMarkerIcon(realPokestop, ts2 + 10));
			}
		}, (pokestop.lure_expire_timestamp - ts) * 1000);
}

// MARK: - Popups

function updateOpenedPopupLoop() {
	if (openedPokemon !== undefined) {
		openedPokemon.marker._popup.setContent(getPokemonPopupContent(openedPokemon));
	}
	if (openedPokestop !== undefined) {
		openedPokestop.marker._popup.setContent(getPokestopPopupContent(openedPokestop));
	}
	if (openedGym !== undefined) {
		openedGym.marker._popup.setContent(getGymPopupContent(openedGym));
	}
    if (openedCell !== undefined) {
        openedCell.marker._popup.setContent(getCellPopupContent(openedCell));
    }
}

function updateCellsLoop() {
    const ts = Math.round((new Date()).getTime() / 1000);
    $.each(cellMarkers, function (index, cell) {
        cell.marker.setStyle(getCellStyle(cell, ts));
    });
}

function getPokemonPopupContent(pokemon) {
	const despawnDate = new Date(pokemon.expire_timestamp * 1000);

    let content = '<center>';

    let pokemonName;
    if (pokemon.form !== 0 && pokemon.form !== null) {
        pokemonName = getFormName(pokemon.form) + ' ' + getPokemonName(pokemon.pokemon_id);
    } else {
        pokemonName = getPokemonName(pokemon.pokemon_id);
    }

	content += '<h6><b>'+pokemonName+'</b></h6>';

	if (pokemon.expire_timestamp_verified) {
		content += '<b>Despawn Time:</b> '
	} else {
		content += '<b>Despawn Time:</b> ~'
	}
    content += despawnDate.toLocaleTimeString() + ' (' + getTimeUntill(despawnDate) + ')<br>';


    if (pokemon.first_seen_timestamp !== 0 && pokemon.first_seen_timestamp !== undefined) {
        const firstSeenDate = new Date(pokemon.first_seen_timestamp * 1000);
        content += '<b>First Seen:</b> ' + firstSeenDate.toLocaleTimeString() + ' (' + getTimeSince(firstSeenDate) + ')<br>';
    }
    if (pokemon.updated !== 0 && pokemon.updated !== null) {
        const updatedDate = new Date(pokemon.updated * 1000);
        content += '<b>Latest Seen:</b> ' + updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')<br>';
    }

    let didAddBr = false;
    if (pokemon.weather !== 0 && pokemon.weather !== null) {
        if (!didAddBr) {
            didAddBr = true;
            content += '<br>';
        }
        content += '<b>Weather:</b> ' + getWeatherName(pokemon.weather) + '<br>';
    }
    if (pokemon.atk_iv !== null) {
        if (!didAddBr) {
            didAddBr = true;
            content += '<br>';
        }
        const ivPercent = Math.round( (pokemon.atk_iv + pokemon.def_iv + pokemon.sta_iv) / 45 * 1000 ) / 10;
        content += '<b>IV:</b> ' + ivPercent + '% (A' + pokemon.atk_iv + '|D' + pokemon.def_iv + '|S' + pokemon.sta_iv + ')<br>';
    }
    if (pokemon.cp !== null) {
        if (!didAddBr) {
            didAddBr = true;
            content += '<br>';
        }
        content += '<b>CP:</b> ' + pokemon.cp + ' (Lvl. ' + pokemon.level + ')<br>';
    }

    content += '<br><a href="https://www.google.com/maps/place/'+pokemon.lat+','+pokemon.lon+'" target="_blank" title="Open in Google Maps"><b>Navigate</b></a>';
    content += '<br><a id="h' + pokemon.id + '" title="Hide Pokemon" href="#" onclick="setIndividualPokemonHidden(' + pokemon.id + ');return false;"><b>Hide Pokemon</b></a>';
    content += '<br><a title="Filter Pokemon" href="#" onclick="addPokemonFilter(' + pokemon.pokemon_id + ', false);return false;"><b>Filter Pokemon</b></a>';
    content += '</center>';

	return content
}

function setIndividualPokemonHidden(id) {
    if (id > 0 && !hiddenPokemonIds.includes(id)) {
        hiddenPokemonIds.push(id);
        const pokemonMarker = pokemonMarkers.find(function (value) {
            return id == value.id;
        });

        if (pokemonMarker === null) {
            console.log("Failed to find pokemon marker", id);
        } else {
            map.removeLayer(pokemonMarker.marker);
        }
    }
}

function addPokemonFilter(pokemonId, show) {
    pokemonFilter[pokemonId]["show"] = show;
    store('pokemon_filter', JSON.stringify(pokemonFilter));

    $.each(pokemonMarkers, function (index, pokemon) {
        if (pokemon.pokemon_id === pokemonId) {
            map.removeLayer(pokemon.marker);
        }
    });
}

function getPokestopPopupContent(pokestop) {
	const now = new Date();
    const lureExpireDate = new Date(pokestop.lure_expire_timestamp * 1000);

	let content = '<center>';
	if (pokestop.name === null || pokestop.name === "") {
		content += '<h6><b>Unknown Pokestop Name</b></h6>';
	} else {
		content += '<h6><b>'+pokestop.name+'</b></h6>';
	}

    if (pokestop.url !== null) {
        content += '<img src="'+pokestop.url.replace("http://", "https://")+'" style="max-width:150px;max-height:100px;"/><br><br>';
    }

	if (lureExpireDate >= now) {
        content += '<b>Lure Type:</b> ' + getLureTypeName(pokestop.lure_id) + '<br>';
		content += '<b>Lure End Time:</b> ' + lureExpireDate.toLocaleTimeString() + ' (' + getTimeUntill(lureExpireDate) + ')<br><br>';
	}

	if (pokestop.quest_type !== null) {
	    let conditions = pokestop.quest_conditions;
        let conditionsString = '';
        if (conditions !== undefined && conditions.length > 0) {
            conditionsString += ' (';
            $.each(conditions, function (index, condition) {
                let formating
                if (index === 0) {
                    formating = '';
                } else {
                    formating = ', ';
                }

                conditionsString += formating + getQuestCondition(condition);
            });
            conditionsString += ')';
        }

        content += '<b>Quest Condition:</b> ' + getQuestName(pokestop.quest_type, pokestop.quest_target) + conditionsString + '<br>';

        $.each(pokestop.quest_rewards, function (index, reward) {
            content += '<b>Quest Reward:</b> ' + getQuestReward(reward) + '<br>';
        });

        content += '<br>';

    }

    const updatedDate = new Date(pokestop.updated*1000);
    if (updatedDate) {
        content += "<b>Last Updated:</b> " + updatedDate.toLocaleDateString() + ' ' + updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')<br>';
    }

    content += '<br><a href="https://www.google.com/maps/place/'+pokestop.lat+','+pokestop.lon+'" target="_blank" title="Open in Google Maps"><b>Navigate</b></a>';
    content += '</center>';
    return content;

}

function getGymPopupContent(gym) {
	const now = new Date();
	const raidBattleDate = new Date(gym.raid_battle_timestamp*1000);
	const raidEndDate = new Date(gym.raid_end_timestamp*1000);

	let content = '<center>';

    if (gym.name === null || gym.name === "") {
        content += '<h6><b>Unknown Gym Name</b></h6>';
    } else {
        content += '<h6><b>'+gym.name+'</b></h6>';
    }

    if (gym.url !== null) {
        content += '<img src="'+gym.url.replace("http://", "https://")+'" style="max-width:150px;max-height:100px;"/><br><br>';
    }

    let hasStatus = false;
    if (gym.ex_raid_eligible === true) {
        content += '<b>Gym is EX-Raid eligible</b><br>';
        hasStatus = true;
    }
    if (gym.in_battle === true) {
        content += '<b>Gym is under attack!</b><br>';
        hasStatus = true;
    }

    if (hasStatus) {
        content += '<br>';
    }

    const isRaid = raidEndDate >= now && parseInt(gym.raid_level) > 0;
    const isRaidBattle = raidBattleDate <= now && isRaid;

	if (isRaid && gym.raid_pokemon_id !== 0 && gym.raid_pokemon_id !== null) {
        let pokemonName;
        if (gym.raid_pokemon_form !== 0 && gym.raid_pokemon_form !== null) {
            pokemonName = getFormName(gym.raid_pokemon_form) + ' ' + getPokemonName(gym.raid_pokemon_id);
        } else {
            pokemonName = getPokemonName(gym.raid_pokemon_id);
        }
		content += "<b>Raid Boss:</b> " + pokemonName + '<br>';
	} else if (isRaidBattle) {
		content += "<b>Raid Boss:</b> Unknown Raid Boss<br>";
	}
    if (isRaid && gym.raid_pokemon_move_1 !== 0 && gym.raid_pokemon_move_1 !== null && isRaid &&
        gym.raid_pokemon_move_2 !== 0 && gym.raid_pokemon_move_2 !== null) {
        content += "<b>Raid Moves:</b> " + getMoveName(gym.raid_pokemon_move_1) + ' | ' + getMoveName(gym.raid_pokemon_move_2) + '<br>';
    }
    if (isRaid && gym.raid_pokemon_cp !== 0 && gym.raid_pokemon_cp !== null) {
        content += "<b>Raid CP:</b> " + gym.raid_pokemon_cp + '<br>';
    }
	if (isRaid) {
        if (gym.raid_is_exclusive) {
            content += "<b>Raid Level:</b> EX<br>";
        } else {
            content += "<b>Raid Level:</b> " + gym.raid_level + '<br>';
        }
	}
	if (isRaid && !isRaidBattle) {
		content += "<b>Raid Start:</b> " + raidBattleDate.toLocaleTimeString() + ' ('+getTimeUntill(raidBattleDate)+')<br>';
	}
	if (isRaid) {
		content += "<b>Raid End:</b> " + raidEndDate.toLocaleTimeString() + ' ('+getTimeUntill(raidEndDate)+')<br><br>';
	}

    const updatedDate = new Date(gym.updated*1000);
    const modifiedDate = new Date(gym.last_modified_timestamp*1000);
    if (updatedDate) {
        content += "<b>Last Updated:</b> " + updatedDate.toLocaleDateString() + ' ' + updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')<br>';
    }
    if (modifiedDate) {
        content += "<b>Last Modified:</b> " + modifiedDate.toLocaleDateString() + ' ' + modifiedDate.toLocaleTimeString() + ' (' + getTimeSince(modifiedDate) + ')<br>';
    }

    content += '<br><a href="https://www.google.com/maps/place/'+gym.lat+','+gym.lon+'" target="_blank" title="Open in Google Maps"><b>Navigate</b></a>';
	content += '</center>';
	return content;
}

function getCellPopupContent(cell) {

    let content = '<center>';
    content += '<h6><b>Level '+cell.level+' S2 Cell</b></h6>';
    content += '<b>Id:</b> '+cell.id+'<br>';

    const updatedDate = new Date(cell.updated * 1000);

    content += '<b>Last Updated:</b> '+ updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')';
    content += '</center>';
    return content;
}

// MARK: - Translation

function getPokemonNameNoId(pokemonId) {
    return i18n('poke_'+pokemonId);
}

function getPokemonName(pokemonId) {
	return i18n('poke_'+pokemonId) + ' (' + pokemonId + ')';
}

function getThrowType(typeID) {
    return i18n('throw_type_'+typeID);
}

function getPokemonType(typeId) {
    return i18n('poke_type_'+typeId);
}

function getFormName(formId) {
    return i18n('form_'+formId);
}

function getMoveName(moveId) {
    return i18n('move_'+moveId);
}

function getWeatherName(weatherId) {
    return i18n('weather_'+weatherId);
}

function getQuestName(questId, amount) {
    return i18n('quest_'+questId, {"amount": amount});
}

function getItemName(itemId) {
    return i18n('item_'+itemId);
}

function getQuestReward(reward) {
    const id = reward.type;
    const info = reward.info;

    if (id === 1 && info !== undefined && info.amount !== undefined) {
        return i18n('quest_reward_1_formatted', {'amount': info.amount});
    } else if (id === 2 && info !== undefined && info.amount !== undefined && info.item_id !== undefined) {
        return i18n('quest_reward_2_formatted', {'amount': info.amount, 'item': getItemName(info.item_id)});
    } else if (id === 3 && info !== undefined && info.amount !== undefined) {
        return i18n('quest_reward_3_formatted', {'amount': info.amount});
    } else if (id === 4 && info !== undefined && info.amount !== undefined && info.pokemon_id !== undefined) {
        return i18n('quest_reward_4_formatted', {'amount': info.amount, 'pokemon': getPokemonName(info.pokemon_id)});
    } else if (id === 7 && info !== undefined && info.pokemon_id !== undefined) {
        var string;
        if (info.form_id !== 0 && info.form_id !== null) {
            string = getFormName(info.form_id) + ' ' + getPokemonName(info.pokemon_id);
        } else {
            string = getPokemonName(info.pokemon_id);
        }
        if (info.shiny) {
            string += ' (Shiny)';
        }
        return string;
    } else {
        return i18n('quest_reward_'+id);
    }
}

function getQuestCondition(condition) {

    const id = condition.type;
    const info = condition.info;

    if (id === 1 && info !== undefined && info.pokemon_type_ids !== undefined) {
        let typesString = '';
        $.each(info.pokemon_type_ids, function (index, typeId) {
            let formatted;
            if (index === 0) {
                formatted = '';
            } else if (index === info.pokemon_type_ids.length - 1) {
                formatted = ' or ';
            } else {
                formatted = ', ';
            }
            typesString += formatted + getPokemonType(typeId);
        });
        return i18n('quest_condition_1_formatted', {'types': typesString});
    } else if (id === 2 && info !== undefined && info.pokemon_ids !== undefined) {
        let pokemonString = '';
        $.each(info.pokemon_ids, function (index, pokemonId) {
            let formatted;
            if (index === 0) {
                formatted = '';
            } else if (index === info.pokemon_ids.length - 1) {
                formatted = ' or ';
            } else {
                formatted = ', ';
            }
            pokemonString += formatted + getPokemonNameNoId(pokemonId);
        });
        return i18n('quest_condition_2_formatted', {'pokemon': pokemonString});
    } else if (id === 7 && info !== undefined && info.raid_levels !== undefined) {
        let levelsString = '';
        $.each(info.raid_levels, function (index, level) {
            let formatted;
            if (index === 0) {
                formatted = '';
            } else if (index === info.raid_levels.length - 1) {
                formatted = ' or ';
            } else {
                formatted = ', ';
            }
            levelsString += formatted + level;
        });
        return i18n('quest_condition_7_formatted', {'levels': levelsString});
    } else if (id === 8 && info !== undefined && info.throw_type_id !== undefined) {
        return i18n('quest_condition_8_formatted', {'throw_type': getThrowType(info.throw_type_id)});
    } else if (id === 11 && info !== undefined && info.item_id !== undefined) {
        return i18n('quest_condition_11_formatted', {'item': getItemName(info.item_id)});
    } else if (id === 14 && info !== undefined && info.throw_type_id !== undefined) {
        return i18n('quest_condition_14_formatted', {'throw_type': getThrowType(info.throw_type_id)});
    } else {
        return i18n('quest_condition_'+id);
    }

}

// MARK: - Markers

function getCellMarker(cell, ts) {
    const polygon = L.polygon(cell.polygon);
    polygon.setStyle(getCellStyle(cell, ts));
    polygon.bindPopup(getCellPopupContent(cell));
    polygon.on('popupopen', function (popup) {
        openedCell = cell;
        polygon._popup.setContent(getCellPopupContent(cell));
    });
    return polygon;
}

function getCellStyle(cell, ts) {
    let ago = ts - cell.updated;
    let value;
    if (ago <= 150) {
        value = 0;
    } else {
        value = Math.min((ago - 150) / 750, 1);
    }
    const hue = ((1-value)*120).toString(10);
    return {fillColor: ["hsl(",hue,",100%,50%)"].join(""), color: "black", opacity: 0.75, fillOpacity: 0.5};
}

function getPokemonMarkerIcon(pokemon, ts) {
	const size = getPokemonSize(pokemon.pokemon_id);

    let pokemonIdString;
    if (pokemon.form !== 0 && pokemon.form !== null) {
        const pokemonIdStringTmp = '' + pokemon.pokemon_id + '-' + pokemon.form;
        if ($.inArray(pokemonIdStringTmp, avilableForms) !== -1) {
            pokemonIdString = pokemonIdStringTmp;
        } else {
            pokemonIdString = '' + pokemon.pokemon_id;
        }
    } else {
        pokemonIdString = '' + pokemon.pokemon_id;
    }

    const icon = L.icon({
        iconUrl: 		'/static/img/pokemon/' + pokemonIdString + '.png',
        iconSize:    	[size, size],
        iconAnchor:   	[size/2, size/2],
        popupAnchor:  	[0, -(size/2)]
    });
    return icon;
}

function getPokemonMarker(pokemon, ts) {
    const marker = L.marker([pokemon.lat, pokemon.lon], {
        icon: getPokemonMarkerIcon(pokemon, ts),
        forceZIndex: 40 + getPokemonIndex(pokemon.pokemon_id)
    });
    marker.bindPopup('');
    marker.on('popupopen', function (popup) {
        openedPokemon = pokemon;
        marker._popup.setContent(getPokemonPopupContent(pokemon));
    });
    return marker;
}

function getPokestopMarkerIcon(pokestop, ts) {
	let icon;
	if (showQuests && pokestop.quest_type !== null && pokestop.quest_rewards[0] !== undefined) {

        const id = pokestop.quest_rewards[0].type;
        const info = pokestop.quest_rewards[0].info;

        let rewardString;

        if (id === 1 && info !== undefined && info.amount !== undefined) {
            rewardString = "i-2";
        } else if (id === 2 && info !== undefined && info.amount !== undefined && info.item_id !== undefined) {
            rewardString = "i"+info.item_id;
        } else if (id === 3 && info !== undefined && info.amount !== undefined) {
            rewardString = "i-1";
        } else if (id === 4 && info !== undefined && info.amount !== undefined && info.pokemon_id !== undefined) {
            rewardString = "i-3";
        } else if (id === 7 && info !== undefined && info.pokemon_id !== undefined) {
            if (info.form_id !== 0 && info.form_id !== null) {
                const pokemonIdStringTmp = '' + info.pokemon_id + '-' + info.form_id;
                if ($.inArray(pokemonIdStringTmp, avilableForms) !== -1) {
                    rewardString = 'p' + pokemonIdStringTmp;
                } else {
                    rewardString = 'p' + info.pokemon_id;
                }
            } else {
                rewardString = 'p' + info.pokemon_id;
            }
        } else {
            rewardString = "i0";
        }
        const size = getQuestSize(rewardString);


        if (pokestop.lure_expire_timestamp >= ts) {
            var lureIconId = getLureIconId(pokestop.lure_id);
            icon = L.icon({
                iconUrl: '/static/img/quest/' + lureIconId + '_' + rewardString + '.png',
                iconSize: 		[size       , size * 1.667  ],
                iconAnchor: 	[size / 2   , size * 1.567  ],
                popupAnchor: 	[0          , size * -1.567 ]
            });
        } else {
            icon = L.icon({
                iconUrl: '/static/img/quest/0_'+ rewardString +'.png',
                iconSize: 		[size       , size * 1.667  ],
                iconAnchor: 	[size / 2   , size * 1.567  ],
                popupAnchor: 	[0          , size * -1.567 ]
            });
        }
    } else {
        if (pokestop.lure_expire_timestamp >= ts) {
            var lureIconId = getLureIconId(pokestop.lure_id);
            const size = getPokestopSize(pokestop.lure_id);
            icon = L.icon({
                iconUrl: '/static/img/pokestop/' + lureIconId + '.png',
                iconSize:       [size       , size       ],
                iconAnchor:     [size / 2   , size       ],
                popupAnchor:    [0          , -(size / 2)]
            });
        } else {
            icon = L.icon({
                iconUrl: '/static/img/pokestop/0.png',
                iconSize: [30, 30],
                iconAnchor: [15, 27],
                popupAnchor: [0, -27]
            });
        }
    }
	return icon;
}

function getPokestopMarker(pokestop, ts) {

    let zIndex;

    if (showQuests && pokestop.quest_type !== null && pokestop.quest_rewards[0] !== undefined) {
        let rewardString;
        const id = pokestop.quest_rewards[0].type;
        const info = pokestop.quest_rewards[0].info;
        if (id === 1 && info !== undefined && info.amount !== undefined) {
            rewardString = "i-2";
        } else if (id === 2 && info !== undefined && info.amount !== undefined && info.item_id !== undefined) {
            rewardString = "i" + info.item_id;
        } else if (id === 3 && info !== undefined && info.amount !== undefined) {
            rewardString = "i-1";
        } else if (id === 4 && info !== undefined && info.amount !== undefined && info.pokemon_id !== undefined) {
            rewardString = "i-3";
        } else if (id === 7 && info !== undefined && info.pokemon_id !== undefined) {
            rewardString = "p" + info.pokemon_id;
        } else {
            rewardString = "i0";
        }
        zIndex = getQuestIndex(rewardString);
    } else {
        zIndex = 0;
    }

    const marker = L.marker([pokestop.lat, pokestop.lon], {
        icon: getPokestopMarkerIcon(pokestop, ts),
        forceZIndex: 20 + zIndex
    });
    marker.bindPopup(pokestop.name);
    marker.on('popupopen', function (popup) {
        openedPokestop = pokestop;
        marker._popup.setContent(getPokestopPopupContent(pokestop));
    });
    return marker;
}

function getSpawnpointMarkerIcon(spawnpoint, ts) {
    var iconId = spawnpoint.despawn_second != null ? 1 : 0;
    const icon = L.icon({
        iconUrl:		'/static/img/spawnpoint/' + iconId + '.png',
        iconSize:		[10, 10],
        iconAnchor:		[5, 5],
        popupAnchor:	[0, -5]
    });
    return icon
}

function getSpawnpointMarker(spawnpoint, ts) {
    const marker = L.marker([spawnpoint.lat, spawnpoint.lon], {
        icon: getSpawnpointMarkerIcon(spawnpoint, ts),
        forceZIndex: 10
    });
    var content = '<center><h6><b>Spawnpoint</b></h6></center>';
    var hasTimer = spawnpoint.despawn_second != null;
    if (hasTimer) {
        var timer = Math.round(spawnpoint.despawn_second / 60);
        content += '<br><b>Despawn Timer:</b> ' + timer + ' minutes';
    }
    marker.bindPopup(content);
    return marker;
}

function getGymMarkerIcon(gym, ts) {
    let size;
    if (gym.availble_slots === 6 || gym.team_id === 0) {
        size = 0;
    } else {
        size = (6 - gym.availble_slots);
    }

    let raidLevel = gym.raid_level;
    let icon;
    if (gym.raid_battle_timestamp <= ts && gym.raid_end_timestamp >= ts && showRaids && parseInt(gym.raid_level) > 0) {
        if (gym.raid_pokemon_id !== 0 && gym.raid_pokemon_id !== null) {

        	let pokemonIdString;
        	if (gym.raid_pokemon_form !== 0 && gym.raid_pokemon_form !== null) {
        		const pokemonIdStringTmp = '' + gym.raid_pokemon_id + '-' + gym.raid_pokemon_form;
        		if ($.inArray(pokemonIdStringTmp, avilableForms) !== -1) {
                    pokemonIdString = pokemonIdStringTmp;
				} else {
                    pokemonIdString = '' + gym.raid_pokemon_id;
                }
			} else {
        		pokemonIdString = '' + gym.raid_pokemon_id;
			}

            //Raid Boss
            var iconSize = getRaidSize("p" + gym.raid_pokemon_id);
            icon = L.icon({
                iconUrl: 		'/static/img/raid/'+ gym.team_id + '_' + size + '_' + pokemonIdString+ '.png',
                iconSize: 		[iconSize, iconSize * 1.667],
                iconAnchor: 	[iconSize / 2, iconSize * 1.567],
                popupAnchor: 	[0, iconSize * -1.567]
            });
        } else {
            //Egg
            var iconSize = getRaidSize("l" + raidLevel);
            icon = L.icon({
                iconUrl: 		'/static/img/raid/'+ gym.team_id + '_' + size + '_ue' + raidLevel + '.png',
                iconSize: 		[iconSize, iconSize * 1.667],
                iconAnchor: 	[iconSize / 2, iconSize * 1.567],
                popupAnchor: 	[0, iconSize * -1.567]
            });
        }
    } else if (gym.raid_end_timestamp >= ts && parseInt(gym.raid_level) > 0 && showRaids) {
        //Egg
        var iconSize = getRaidSize("l" + raidLevel);
        icon = L.icon({
            iconUrl: 		'/static/img/raid/'+ gym.team_id + '_' + size + '_e' + raidLevel + '.png',
            iconSize: 		[iconSize, iconSize * 1.667],
            iconAnchor: 	[iconSize / 2, iconSize * 1.567],
            popupAnchor: 	[0, iconSize * -1.567]
        });
    } else {
        //Gym
        var iconSize = getGymSize(gym.team_id);
    	icon = L.icon({
            iconUrl: 		'/static/img/gym/'+ gym.team_id + '_' + size +'.png',
            iconSize:     	[iconSize, iconSize],
            iconAnchor:   	[iconSize / 2, iconSize / 2],
            popupAnchor:  	[0, -20] //TODO: //size * -1.567
        });
    }
    return icon;
}

function getGymMarker(gym, ts) {

	let zIndex;
    if (showRaids && gym.raid_end_timestamp >= ts) {
        zIndex = gym.raid_level
    } else {
        zIndex = 0
    }

    const marker = L.marker([gym.lat, gym.lon], {
        icon: getGymMarkerIcon(gym, ts),
        forceZIndex: 30 + zIndex
    });
    marker.bindPopup(gym.name);
    marker.on('popupopen', function (popup) {
        openedGym = gym;
        marker._popup.setContent(getGymPopupContent(gym));
    });

    return marker

}

// MARK: - Misc

function manageSelectButton(e, isNew) {
    const id = e.attr('data-id');
    const type = e.attr('data-type');
    const info = e.attr('data-info');
    var shouldShow = false;
    if (type === "pokemon" || type === "pokemon-iv") {
        switch (info) {
            case "hide":
                shouldShow = pokemonFilterNew[id]["show"] === false;
                break;
            case "show":
                shouldShow = pokemonFilterNew[id]["show"] === true;
                break;
            case "iv":
                shouldShow = pokemonFilterNew[id]["show"] === "filter";
                break;
            case "small":
                shouldShow = pokemonFilterNew[id]["size"] === "small";
                break;
            case "normal":
                shouldShow = pokemonFilterNew[id]["size"] === "normal";
                break;
            case "large":
                shouldShow = pokemonFilterNew[id]["size"] === "large";
                break;
            case "huge":
                shouldShow = pokemonFilterNew[id]["size"] === "huge";
                break;
            case "off":
                shouldShow = !pokemonFilterNew["iv_" + id]["on"];
                break;
            case "on":
                shouldShow = pokemonFilterNew["iv_" + id]["on"];
                break;
        }
    } else if (type === "quest-misc") {
        switch (info) {
            case "hide":
                shouldShow = questFilterNew["i"+ -id]["show"] === false;
                break;
            case "show":
                shouldShow = questFilterNew["i"+ -id]["show"] === true;
                break;
            case "small":
                shouldShow = questFilterNew["i"+ -id]["size"] === "small";
                break;
            case "normal":
                shouldShow = questFilterNew["i"+ -id]["size"] === "normal";
                break;
            case "large":
                shouldShow = questFilterNew["i"+ -id]["size"] === "large";
                break;
            case "huge":
                shouldShow = questFilterNew["i"+ -id]["size"] === "huge";
                break;
        }
    } else if (type === "quest-item") {
        switch (info) {
            case "hide":
                shouldShow = questFilterNew["i"+ id]["show"] === false;
                break;
            case "show":
                shouldShow = questFilterNew["i"+ id]["show"] === true;
                break;
            case "small":
                shouldShow = questFilterNew["i"+ id]["size"] === "small";
                break;
            case "normal":
                shouldShow = questFilterNew["i"+ id]["size"] === "normal";
                break;
            case "large":
                shouldShow = questFilterNew["i"+ id]["size"] === "large";
                break;
            case "huge":
                shouldShow = questFilterNew["i"+ id]["size"] === "huge";
                break;
        }
    } else if (type === "quest-pokemon") {
        switch (info) {
            case "hide":
                shouldShow = questFilterNew["p"+ id]["show"] === false;
                break;
            case "show":
                shouldShow = questFilterNew["p"+ id]["show"] === true;
                break;
            case "small":
                shouldShow = questFilterNew["p"+ id]["size"] === "small";
                break;
            case "normal":
                shouldShow = questFilterNew["p"+ id]["size"] === "normal";
                break;
            case "large":
                shouldShow = questFilterNew["p"+ id]["size"] === "large";
                break;
            case "huge":
                shouldShow = questFilterNew["p"+ id]["size"] === "huge";
                break;
        }
    } else if (type === "raid-level") {
        switch (info) {
            case "hide":
                shouldShow = raidFilterNew["l" + id]["show"] === false;
                break;
            case "show":
                shouldShow = raidFilterNew["l" + id]["show"] === true;
                break;
            case "small":
                shouldShow = raidFilterNew["l" + id]["size"] === "small";
                break;
            case "normal":
                shouldShow = raidFilterNew["l" + id]["size"] === "normal";
                break;
            case "large":
                shouldShow = raidFilterNew["l" + id]["size"] === "large";
                break;
            case "huge":
                shouldShow = raidFilterNew["l" + id]["size"] === "huge";
                break;
        }
    } else if (type === "raid-hatched") {
        switch (info) {
            case "hide":
                shouldShow = raidFilterNew[id]["show"] === false;
                break;
            case "show":
                shouldShow = raidFilterNew[id]["show"] === true;
                break;
            case "small":
                shouldShow = raidFilterNew[id]["size"] === "small";
                break;
            case "normal":
                shouldShow = raidFilterNew[id]["size"] === "normal";
                break;
            case "large":
                shouldShow = raidFilterNew[id]["size"] === "large";
                break;
            case "huge":
                shouldShow = raidFilterNew[id]["size"] === "huge";
                break;
        }
    } else if (type === "gym-team") {
        switch (info) {
            case "hide":
                shouldShow = gymFilterNew["t" + id]["show"] === false;
                break;
            case "show":
                shouldShow = gymFilterNew["t" + id]["show"] === true;
                break;
            case "small":
                shouldShow = gymFilterNew["t" + id]["size"] === "small";
                break;
            case "normal":
                shouldShow = gymFilterNew["t" + id]["size"] === "normal";
                break;
            case "large":
                shouldShow = gymFilterNew["t" + id]["size"] === "large";
                break;
            case "huge":
                shouldShow = gymFilterNew["t" + id]["size"] === "huge";
                break;
        }
    } else if (type === "gym-ex") {
        switch (info) {
            case "hide":
                shouldShow = gymFilterNew[id]["show"] === false;
                break;
            case "show":
                shouldShow = gymFilterNew[id]["show"] === true;
                break;
            case "small":
                shouldShow = gymFilterNew[id]["size"] === "small";
                break;
            case "normal":
                shouldShow = gymFilterNew[id]["size"] === "normal";
                break;
            case "large":
                shouldShow = gymFilterNew[id]["size"] === "large";
                break;
            case "huge":
                shouldShow = gymFilterNew[id]["size"] === "huge";
                break;
        }
    } else if (type === "gym-slots") {
        switch (info) {
            case "hide":
                shouldShow = gymFilterNew["s" + id]["show"] === false;
                break;
            case "show":
                shouldShow = gymFilterNew["s" + id]["show"] === true;
                break;
            case "small":
                shouldShow = gymFilterNew["s" + id]["size"] === "small";
                break;
            case "normal":
                shouldShow = gymFilterNew["s" + id]["size"] === "normal";
                break;
            case "large":
                shouldShow = gymFilterNew["s" + id]["size"] === "large";
                break;
            case "huge":
                shouldShow = gymFilterNew["s" + id]["size"] === "huge";
                break;
        }
    } else if (type === "pokestop-lured") {
        switch (info) {
            case "hide":
                shouldShow = pokestopFilterNew[id]["show"] === false;
                break;
            case "show":
                shouldShow = pokestopFilterNew[id]["show"] === true;
                break;
            case "small":
                shouldShow = pokestopFilterNew[id]["size"] === "small";
                break;
            case "normal":
                shouldShow = pokestopFilterNew[id]["size"] === "normal";
                break;
            case "large":
                shouldShow = pokestopFilterNew[id]["size"] === "large";
                break;
            case "huge":
                shouldShow = pokestopFilterNew[id]["size"] === "huge";
                break;
        }
    } else if (type === "pokestop-lure") {
        switch (info) {
            case "hide":
                shouldShow = pokestopFilterNew["l" + id]["show"] === false;
                break;
            case "show":
                shouldShow = pokestopFilterNew["l" + id]["show"] === true;
                break;
            case "small":
                shouldShow = pokestopFilterNew["l" + id]["size"] === "small";
                break;
            case "normal":
                shouldShow = pokestopFilterNew["l" + id]["size"] === "normal";
                break;
            case "large":
                shouldShow = pokestopFilterNew["l" + id]["size"] === "large";
                break;
            case "huge":
                shouldShow = pokestopFilterNew["l" + id]["size"] === "huge";
                break;
        }
    } else {
        shouldShow = false;
    }

    if (shouldShow) {
        e.addClass("active");
    } else {
        e.removeClass("active");
    }

    if (isNew) {
        e.removeClass("select-button-new");
        e.addClass("select-button");
        e.on('click', function (e) {
            e.preventDefault();
            if (type === "pokemon" || type === "pokemon-iv") {
                switch (info) {
                    case "hide":
                        pokemonFilterNew[id]["show"] = false;
                        break;
                    case "show":
                        pokemonFilterNew[id]["show"] = true;
                        break;
                    case "iv":
                        return manageIVPopup(id, pokemonFilterNew);
                        break;
                    case "small":
                        pokemonFilterNew[id]["size"] = "small";
                        break;
                    case "normal":
                        pokemonFilterNew[id]["size"] = "normal";
                        break;
                    case "large":
                        pokemonFilterNew[id]["size"] = "large";
                        break;
                    case "huge":
                        pokemonFilterNew[id]["size"] = "huge";
                        break;
                    case "off":
                        pokemonFilterNew["iv_"+id]["on"] = false;
                        break;
                    case "on":
                        pokemonFilterNew["iv_"+id]["on"] = true;
                        break;
                }
            } else if (type === "quest-misc") {
                switch (info) {
                    case "hide":
                        questFilterNew["i"+ -id]["show"] = false;
                        break;
                    case "show":
                        questFilterNew["i"+ -id]["show"] = true;
                        break;
                    case "small":
                        questFilterNew["i"+ -id]["size"] = "small";
                        break;
                    case "normal":
                        questFilterNew["i"+ -id]["size"] = "normal";
                        break;
                    case "large":
                        questFilterNew["i"+ -id]["size"] = "large";
                        break;
                    case "huge":
                        questFilterNew["i"+ -id]["size"] = "huge";
                        break;
                }
            } else if (type === "quest-item") {
                switch (info) {
                    case "hide":
                        questFilterNew["i" + id]["show"] = false;
                        break;
                    case "show":
                        questFilterNew["i" + id]["show"] = true;
                        break;
                    case "small":
                        questFilterNew["i" + id]["size"] = "small";
                        break;
                    case "normal":
                        questFilterNew["i" + id]["size"] = "normal";
                        break;
                    case "large":
                        questFilterNew["i" + id]["size"] = "large";
                        break;
                    case "huge":
                        questFilterNew["i" + id]["size"] = "huge";
                        break;
                }
            } else if (type === "quest-pokemon") {
                switch (info) {
                    case "hide":
                        questFilterNew["p" + id]["show"] = false;
                        break;
                    case "show":
                        questFilterNew["p" + id]["show"] = true;
                        break;
                    case "small":
                        questFilterNew["p" + id]["size"] = "small";
                        break;
                    case "normal":
                        questFilterNew["p" + id]["size"] = "normal";
                        break;
                    case "large":
                        questFilterNew["p" + id]["size"] = "large";
                        break;
                    case "huge":
                        questFilterNew["p" + id]["size"] = "huge";
                        break;
                }
            } else if (type === "raid-level") {
                switch (info) {
                    case "hide":
                        raidFilterNew["l" + id]["show"] = false;
                        break;
                    case "show":
                        raidFilterNew["l" + id]["show"] = true;
                        break;
                    case "small":
                        raidFilterNew["l" + id]["size"] = "small";
                        break;
                    case "normal":
                        raidFilterNew["l" + id]["size"] = "normal";
                        break;
                    case "large":
                        raidFilterNew["l" + id]["size"] = "large";
                        break;
                    case "huge":
                        raidFilterNew["l" + id]["size"] = "huge";
                        break;
                }
            } else if (type === "raid-hatched") {
                switch (info) {
                    case "hide":
                        raidFilterNew[id]["show"] = false;
                        break;
                    case "show":
                        raidFilterNew[id]["show"] = true;
                        break;
                    case "small":
                        raidFilterNew[id]["size"] = "small";
                        break;
                    case "normal":
                        raidFilterNew[id]["size"] = "normal";
                        break;
                    case "large":
                        raidFilterNew[id]["size"] = "large";
                        break;
                    case "huge":
                        raidFilterNew[id]["size"] = "huge";
                        break;
                }
            } else if (type === "gym-team") {
                switch (info) {
                    case "hide":
                        gymFilterNew["t" + id]["show"] = false;
                        break;
                    case "show":
                        gymFilterNew["t" + id]["show"] = true;
                        break;
                    case "small":
                        gymFilterNew["t" + id]["size"] = "small";
                        break;
                    case "normal":
                        gymFilterNew["t" + id]["size"] = "normal";
                        break;
                    case "large":
                        gymFilterNew["t" + id]["size"] = "large";
                        break;
                    case "huge":
                        gymFilterNew["t" + id]["size"] = "huge";
                        break;
                }
            } else if (type === "gym-ex") {
                switch (info) {
                    case "hide":
                        gymFilterNew[id]["show"] = false;
                        break;
                    case "show":
                        gymFilterNew[id]["show"] = true;
                        break;
                    case "small":
                        gymFilterNew[id]["size"] = "small";
                        break;
                    case "normal":
                        gymFilterNew[id]["size"] = "normal";
                        break;
                    case "large":
                        gymFilterNew[id]["size"] = "large";
                        break;
                    case "huge":
                        gymFilterNew[id]["size"] = "huge";
                        break;
                }
            } else if (type === "gym-slots") {
                switch (info) {
                    case "hide":
                        gymFilterNew["s" + id]["show"] = false;
                        break;
                    case "show":
                        gymFilterNew["s" + id]["show"] = true;
                        break;
                    case "small":
                        gymFilterNew["s" + id]["size"] = "small";
                        break;
                    case "normal":
                        gymFilterNew["s" + id]["size"] = "normal";
                        break;
                    case "large":
                        gymFilterNew["s" + id]["size"] = "large";
                        break;
                    case "huge":
                        gymFilterNew["s" + id]["size"] = "huge";
                        break;
                }
            } else if (type === "pokestop-lured") {
                switch (info) {
                    case "hide":
                        pokestopFilterNew[id]["show"] = false;
                        break;
                    case "show":
                        pokestopFilterNew[id]["show"] = true;
                        break;
                    case "small":
                        pokestopFilterNew[id]["size"] = "small";
                        break;
                    case "normal":
                        pokestopFilterNew[id]["size"] = "normal";
                        break;
                    case "large":
                        pokestopFilterNew[id]["size"] = "large";
                        break;
                    case "huge":
                        pokestopFilterNew[id]["size"] = "huge";
                        break;
                }
            } else if (type === "pokestop-lure") {
                switch (info) {
                    case "hide":
                        pokestopFilterNew["l" + id]["show"] = false;
                        break;
                    case "show":
                        pokestopFilterNew["l" + id]["show"] = true;
                        break;
                    case "small":
                        pokestopFilterNew["l" + id]["size"] = "small";
                        break;
                    case "normal":
                        pokestopFilterNew["l" + id]["size"] = "normal";
                        break;
                    case "large":
                        pokestopFilterNew["l" + id]["size"] = "large";
                        break;
                    case "huge":
                        pokestopFilterNew["l" + id]["size"] = "huge";
                        break;
                }
            }
        })
    }
}

function manageConfigureButton(e, isNew) {
    const id = e.attr('data-id');
    const type = e.attr('data-type');
    const info = e.attr('data-info');

    if (isNew) {
        e.removeClass("configure-button-new");
        e.addClass("configure-button");
        e.on('click', function (e) {
            e.preventDefault();
            if (type === "pokemon-iv") {
                switch (info) {
                    case "global-iv":
                        return manageGlobalIVPopup(id, pokemonFilterNew);
                }
            }

        })
    }
}

function getTimeUntill(date) {
    const diff = Math.round((date - new Date()) / 1000);
    const h = Math.floor(diff / 3600);
    const m = Math.floor(diff % 3600 / 60);
    const s = Math.floor(diff % 3600 % 60);

    var str = '';
    if (h > 0) {
        str = h + 'h ' + m + 'm ' + s + 's';
    } else if (m > 0) {
        str = m + 'm ' + s + 's';
    } else {
        str = s + 's';
    }

    return str;
}

function getTimeSince(date) {
    const diff = Math.round(( new Date() - date) / 1000);
    const h = Math.floor(diff / 3600);
    const m = Math.floor(diff % 3600 / 60);
    const s = Math.floor(diff % 3600 % 60);

    var str = '';
    if (h > 0) {
        str = h + 'h ' + m + 'm ' + s + 's';
    } else if (m > 0) {
        str = m + 'm ' + s + 's';
    } else {
        str = s + 's';
    }

    return str;
}

function manageIVPopup(id, filter) {
    const result = prompt("Please enter a IV Filter", filter[id]["filter"]).toUpperCase();
    const prevShow = filter[id]["show"];
    let success;
    if (result == null) {
        success = false;
    } else if (checkIVFilterValid(result)) {
        filter[id]["show"] = "filter";
        filter[id]["filter"] = result;
        success = true;
    } else {
        success = false;
        alert("Invalid IV Filter!");
    }
    if (!success) {
        if (prevShow === true) {
            $('.select-button[data-id="'+id+'"][data-info="show"]').addClass("active");
        } else if (prevShow === false) {
            $('.select-button[data-id="'+id+'"][data-info="hide"]').addClass("active");
        }
    }
    return success;
}

function manageGlobalIVPopup(id, filter) {
    const result = prompt("Please enter a IV Filter", filter['iv_'+id]["filter"]);
    if (result == null) {
        return false;
    } else if (checkIVFilterValid(result)) {
        filter['iv_'+id]["filter"] = result;
        return true;
    } else {
        alert("Invalid IV Filter!");
        return false;
    }
}

function checkIVFilterValid(filter) {
    return filter.replace(/\s/g,'').match(/^(?!&&|\|\|)((\|\||&&)?\(?((A|D|S|L)?[0-9.]+(-(A|D|S|L)?[0-9.]+)?)\)?)*$/g);
}

function getLureIconId(lureId) {
    //return lureId - 500;
    switch (lureId) {
        //case 501:
        //    return 1;
        case 502:
            return 2;
        case 503:
            return 3;
        case 504:
            return 4;
    }
    return 1;
}

function getLureTypeName(lureId) {
    switch (lureId) {
        case 501:
            return "Normal";
        case 502:
            return "Glacial";
        case 503:
            return "Mossy";
        case 504:
            return "Magnetic";
    }
    return "Unknown";
}


// MARK: - Init Filter

function loadPokemonFilter() {
    const scrollHeight = $(document).height() * 0.5;
    const table = $('#table-filter-pokemon').DataTable( {
        "language": {
            "search": i18n('filter_table_search'),
            "emptyTable": i18n('filter_pokemon_table_empty'),
            "zeroRecords": i18n('filter_pokemon_table_empty'),
        },
        rowGroup: {
            dataSrc: "type"
        },
        "autoWidth": false,
        "columns": [
            { "data": "image", "width": "5%", "className": 'details-control'},
            { "data": "name", "width": "15%" },
            { "data": {
                    _:    "id.formatted",
                    sort: "id.sort"
                }, "width": "5%" },
            { "data": "filter" },
            { "data": "size" }
        ],
        "ajax": {
            "url": "/api/get_data?show_pokemon_filter=true",
            "dataSrc": "data.pokemon_filters"
        },
        "info":     false,
        "order": [[ 2, "asc" ]],
        "search.caseInsensitive": true,
        "columnDefs": [ {
            "targets": [0,3,4],
            "orderable": false
        },{
            "type": "num",
            "targets": 2
        } ],
        "deferRender": true,
        "scrollY": scrollHeight,
        "scrollCollapse": false,
        "scroller": true,
        "lengthChange": false,
        "dom": "lfrti",
        "drawCallback": function( settings ) {
            $('.lazy_load').each(function () {
                var img = $(this);
                img.removeClass("lazy_load");
                img.attr('src', img.data('src'));
            });

            $('.select-button-new').each(function (button) {
                manageSelectButton($(this), true);
            });
            $('.configure-button-new').each(function (button) {
                manageConfigureButton($(this), true);
            });
        },
        "responsive": true
    });

    $('#table-filter-pokemon tbody').on('click', 'td.details-control', function () {
        $('.select-button-new').each(function (button) {
            manageSelectButton($(this), true);
        });
        $('.configure-button-new').each(function (button) {
            manageConfigureButton($(this), true);
        });
    } );

    table.on( 'search.dt', function () {
        $( "tr" ).each(function() {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (row.child.isShown()) {
                row.child.hide();
                tr.removeClass('parent');

            };
        })
    } );


    $('#filterPokemonModal').on("shown.bs.modal", function () {
        const dataTable= $('#table-filter-pokemon').DataTable();
        dataTable.responsive.recalc();
        dataTable.columns.adjust();
    });
}

function loadQuestFilter() {
    const scrollHeight = $(document).height() * 0.5;
    const table = $('#table-filter-quest').DataTable( {
        "language": {
            "search": i18n('filter_table_search'),
            "emptyTable": i18n('filter_quest_table_empty'),
            "zeroRecords": i18n('filter_quest_table_empty'),
        },
        rowGroup: {
            dataSrc: "type"
        },
        "autoWidth": false,
        "columns": [
            { "data": "image", "width": "5%", "className": 'details-control'},
            { "data": "name", "width": "15%" },
            { "data": {
                    _:    "id.formatted",
                    sort: "id.sort"
                }, "width": "5%" },
            { "data": "filter" },
            { "data": "size" }
        ],
        "ajax": {
            "url": "/api/get_data?show_quest_filter=true",
            "dataSrc": "data.quest_filters"
        },
        "info":     false,
        "order": [[ 2, "asc" ]],
        "search.caseInsensitive": true,
        "columnDefs": [ {
            "targets": [0,3,4],
            "orderable": false
        },{
            "type": "num",
            "targets": 2
        } ],
        "deferRender": true,
        "scrollY": scrollHeight,
        "scrollCollapse": false,
        "scroller": true,
        "lengthChange": false,
        "dom": "lfrti",
        "drawCallback": function( settings ) {
            $('.lazy_load').each(function () {
                var img = $(this);
                img.removeClass("lazy_load");
                img.attr('src', img.data('src'));
            });

            $('.select-button-new').each(function (button) {
                manageSelectButton($(this), true);
            });
            $('.configure-button-new').each(function (button) {
                manageConfigureButton($(this), true);
            });
        },
        "responsive": true
    });

    $('#table-filter-quest tbody').on('click', 'td.details-control', function () {
        $('.select-button-new').each(function (button) {
            manageSelectButton($(this), true);
        });
        $('.configure-button-new').each(function (button) {
            manageConfigureButton($(this), true);
        });
    } );

    table.on( 'search.dt', function () {
        $( "tr" ).each(function() {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (row.child.isShown()) {
                row.child.hide();
                tr.removeClass('parent');

            };
        })
    } );


    $('#filterQuestModal').on("shown.bs.modal", function () {
        const dataTable= $('#table-filter-quest').DataTable();
        dataTable.responsive.recalc();
        dataTable.columns.adjust();
    });
}

function loadRaidFilter() {
    const scrollHeight = $(document).height() * 0.5;
    const table = $('#table-filter-raid').DataTable( {
        "language": {
            "search": i18n('filter_table_search'),
            "emptyTable": i18n('filter_raid_table_empty'),
            "zeroRecords": i18n('filter_raid_table_empty'),
        },
        rowGroup: {
            dataSrc: "type"
        },
        "autoWidth": false,
        "columns": [
            { "data": "image", "width": "5%", "className": 'details-control'},
            { "data": "name", "width": "15%" },
            { "data": {
                    _:    "id.formatted",
                    sort: "id.sort"
                }, "width": "5%" },
            { "data": "filter" },
            { "data": "size" }
        ],
        "ajax": {
            "url": "/api/get_data?show_raid_filter=true",
            "dataSrc": "data.raid_filters"
        },
        "info":     false,
        "order": [[ 2, "asc" ]],
        "search.caseInsensitive": true,
        "columnDefs": [ {
            "targets": [0,3,4],
            "orderable": false
        },{
            "type": "num",
            "targets": 2
        } ],
        "deferRender": true,
        "scrollY": scrollHeight,
        "scrollCollapse": false,
        "scroller": true,
        "lengthChange": false,
        "dom": "lfrti",
        "drawCallback": function( settings ) {
            $('.lazy_load').each(function () {
                var img = $(this);
                img.removeClass("lazy_load");
                img.attr('src', img.data('src'));
            });

            $('.select-button-new').each(function (button) {
                manageSelectButton($(this), true);
            });
            $('.configure-button-new').each(function (button) {
                manageConfigureButton($(this), true);
            });
        },
        "responsive": true
    });

    $('#table-filter-raid tbody').on('click', 'td.details-control', function () {
        $('.select-button-new').each(function (button) {
            manageSelectButton($(this), true);
        });
        $('.configure-button-new').each(function (button) {
            manageConfigureButton($(this), true);
        });
    } );

    table.on( 'search.dt', function () {
        $( "tr" ).each(function() {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (row.child.isShown()) {
                row.child.hide();
                tr.removeClass('parent');

            };
        })
    } );


    $('#filterRaidModal').on("shown.bs.modal", function () {
        const dataTable= $('#table-filter-raid').DataTable();
        dataTable.responsive.recalc();
        dataTable.columns.adjust();
    });
}

function loadGymFilter() {
    const scrollHeight = $(document).height() * 0.5;
    const table = $('#table-filter-gym').DataTable( {
        "language": {
            "search": i18n('filter_table_search'),
            "emptyTable": i18n('filter_gym_table_empty'),
            "zeroRecords": i18n('filter_gym_table_empty'),
        },
        rowGroup: {
            dataSrc: "type"
        },
        "autoWidth": false,
        "columns": [
            { "data": "image", "width": "5%", "className": 'details-control'},
            { "data": "name", "width": "15%" },
            { "data": {
                    _:    "id.formatted",
                    sort: "id.sort"
                }, "width": "5%" },
            { "data": "filter" },
            { "data": "size" }
        ],
        "ajax": {
            "url": "/api/get_data?show_gym_filter=true",
            "dataSrc": "data.gym_filters"
        },
        "info":     false,
        "order": [[ 2, "asc" ]],
        "search.caseInsensitive": true,
        "columnDefs": [ {
            "targets": [0,3,4],
            "orderable": false
        },{
            "type": "num",
            "targets": 2
        } ],
        "deferRender": true,
        "scrollY": scrollHeight,
        "scrollCollapse": false,
        "scroller": true,
        "lengthChange": false,
        "dom": "lfrti",
        "drawCallback": function( settings ) {
            $('.lazy_load').each(function () {
                var img = $(this);
                img.removeClass("lazy_load");
                img.attr('src', img.data('src'));
            });

            $('.select-button-new').each(function (button) {
                manageSelectButton($(this), true);
            });
            $('.configure-button-new').each(function (button) {
                manageConfigureButton($(this), true);
            });
        },
        "responsive": true
    });

    $('#table-filter-gym tbody').on('click', 'td.details-control', function () {
        $('.select-button-new').each(function (button) {
            manageSelectButton($(this), true);
        });
        $('.configure-button-new').each(function (button) {
            manageConfigureButton($(this), true);
        });
    } );

    table.on( 'search.dt', function () {
        $( "tr" ).each(function() {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (row.child.isShown()) {
                row.child.hide();
                tr.removeClass('parent');

            };
        })
    } );


    $('#filterGymModal').on("shown.bs.modal", function () {
        const dataTable= $('#table-filter-gym').DataTable();
        dataTable.responsive.recalc();
        dataTable.columns.adjust();
    });
}

function loadPokestopFilter() {
    const scrollHeight = $(document).height() * 0.5;
    const table = $('#table-filter-pokestop').DataTable( {
        "language": {
            "search": i18n('filter_table_search'),
            "emptyTable": i18n('filter_pokestop_table_empty'),
            "zeroRecords": i18n('filter_pokestop_table_empty'),
        },
        rowGroup: {
            dataSrc: "type"
        },
        "autoWidth": false,
        "columns": [
            { "data": "image", "width": "5%", "className": 'details-control'},
            { "data": "name", "width": "15%" },
            { "data": {
                    _:    "id.formatted",
                    sort: "id.sort"
                }, "width": "5%" },
            { "data": "filter" },
            { "data": "size" }
        ],
        "ajax": {
            "url": "/api/get_data?show_pokestop_filter=true",
            "dataSrc": "data.pokestop_filters"
        },
        "info":     false,
        "order": [[ 2, "asc" ]],
        "search.caseInsensitive": true,
        "columnDefs": [ {
            "targets": [0,3,4],
            "orderable": false
        },{
            "type": "num",
            "targets": 2
        } ],
        "deferRender": true,
        "scrollY": scrollHeight,
        "scrollCollapse": false,
        "scroller": true,
        "lengthChange": false,
        "dom": "lfrti",
        "drawCallback": function( settings ) {
            $('.lazy_load').each(function () {
                var img = $(this);
                img.removeClass("lazy_load");
                img.attr('src', img.data('src'));
            });

            $('.select-button-new').each(function (button) {
                manageSelectButton($(this), true);
            });
            $('.configure-button-new').each(function (button) {
                manageConfigureButton($(this), true);
            });
        },
        "responsive": true
    });

    $('#table-filter-pokestop tbody').on('click', 'td.details-control', function () {
        $('.select-button-new').each(function (button) {
            manageSelectButton($(this), true);
        });
        $('.configure-button-new').each(function (button) {
            manageConfigureButton($(this), true);
        });
    } );

    table.on( 'search.dt', function () {
        $( "tr" ).each(function() {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            if (row.child.isShown()) {
                row.child.hide();
                tr.removeClass('parent');

            };
        })
    } );


    $('#filterPokestopModal').on("shown.bs.modal", function () {
        const dataTable= $('#table-filter-pokestop').DataTable();
        dataTable.responsive.recalc();
        dataTable.columns.adjust();
    });
}
