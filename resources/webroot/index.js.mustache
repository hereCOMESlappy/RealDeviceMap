let map;

let lastUpdateServer = 0;

let lastUpdate = 0;
let isLoading = false;

let pokestopMarkers = [];
let gymMarkers = [];
let pokemonMarkers = [];
let spawnpointMarkers = [];

let pokemonFilter = {};
let pokemonFilterNew = {};

let openedPokemon;
let openedPokestop;
let openedGym;

let showPokestops;
let showQuests;
let showGyms;
let showRaids;
let showPokemon;
let showSpawnpoints;

let avilableForms = [];

let pokemonFilterLoaded = false;

$(function() {

    $.getJSON( "static/data/{{{locale}}}.json", {_: '{{{locale_last_modified}}}'}, function( data ) {
        i18n.translator.add(data);
    });

    avilableForms = JSON.parse('{{{avilable_forms_json}}}');

    loadStorage();

    $('#settingsModal').on("show.bs.modal", function () {
        pokemonFilterNew = $.extend(true, {}, pokemonFilter);

        $('.select-button').each(function (button) {
            manageSelectButton($(this), false);
        });

        const scrollHeight = $(document).height() * 0.5;

        if (!pokemonFilterLoaded) {
        	pokemonFilterLoaded = true;
            const table = $('#table-filter-pokemon').DataTable( {
				"language": {
                    "search": i18n('filter_table_search'),
                    "emptyTable": i18n('filter_table_empty'),
					"zeroRecords": i18n('filter_table_empty'),
                },
                "autoWidth": false,
                "columns": [
                    { "data": "image", "width": "5%", "className": 'details-control'},
                    { "data": "pokemon_name", "width": "15%"  },
                    { "data": "pokemon_id", "width": "5%" },
                    { "data": "filter" },
                    { "data": "size" }
                ],
                "ajax": {
                    "url": "/api/get_data?show_pokemon_filter=true",
                    "dataSrc": "data.pokemon_filters"
                },
                "info":     false,
                "order": [[ 2, "asc" ]],
                "search.caseInsensitive": true,
                "columnDefs": [ {
                    "targets": [0,3,4],
                    "orderable": false
                }],
                "deferRender": true,
                "scrollY": scrollHeight,
                "scrollCollapse": true,
                "scroller": true,
                "lengthChange": false,
                "dom": "lfrti",
                "drawCallback": function( settings ) {
					$('.lazy_load').each(function () {
						var img = $(this);
						img.removeClass("lazy_load");
						img.attr('src', img.data('src'));
					});

                    $('.select-button-new').each(function (button) {
                        manageSelectButton($(this), true);
                    });
                },
                "responsive": true
            });

            $('#table-filter-pokemon tbody').on('click', 'td.details-control', function () {
                $('.select-button-new').each(function (button) {
                    manageSelectButton($(this), true);
                });
            } );

            table.on( 'search.dt', function () {
                $( "tr" ).each(function() {
                    var tr = $(this).closest('tr');
                    var row = table.row(tr);
                    if (row.child.isShown()) {
                        row.child.hide();
                        tr.removeClass('parent');

                    };
                })
            } );
		}

    });

    $('#filterPokemonModal').on("shown.bs.modal", function () {
        const dataTable= $('#table-filter-pokemon').DataTable();
        dataTable.responsive.recalc();
        dataTable.columns.adjust();
    });

    initMap();
});

// MARK: - Setup

function loadStorage() {
    const showGymsValue = retrieve('show_gyms');
    if (showGymsValue === null) {
        store('show_gyms', true);
        showGyms = true;
    } else {
        showGyms = (showGymsValue === 'true');
    }

    const showRaidsValue = retrieve('show_raids');
    if (showRaidsValue === null) {
        store('show_raids', true);
        showRaids = true;
    } else {
        showRaids = (showRaidsValue === 'true');
    }

    const showPokestopsValue = retrieve('show_pokestops');
    if (showPokestopsValue === null) {
        store('show_pokestops', false);
        showPokestops = false;
    } else {
        showPokestops = (showPokestopsValue  === 'true');
    }

    const showQuestsValue = retrieve('show_quests');
    if (showQuestsValue === null) {
        store('show_quests', true);
        showQuests = true;
    } else {
        showQuests = (showQuestsValue  === 'true');
    }

    const showSpawnpointsValue = retrieve('show_spawnpoints');
    if (showSpawnpointsValue === null) {
        store('show_spawnpoints', false);
        showSpawnpoints = false;
    } else {
        showSpawnpoints = (showSpawnpointsValue === 'true');
    }

    const showPokemonValue = retrieve('show_pokemon');
    if (showPokemonValue === null) {
        store('show_pokemon', true);
        showPokemon = true;
    } else {
        showPokemon = (showPokemonValue === 'true');
    }

    const pokemonFilterValue = retrieve('pokemon_filter');
    if (pokemonFilterValue === null) {
        const defaultPokemonFilter = [];
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultPokemonFilter[i] = {"show": true, "size": "normal"};
        }
        store('pokemon_filter',JSON.stringify(defaultPokemonFilter));
        pokemonFilter = defaultPokemonFilter;
    } else {
        pokemonFilter = JSON.parse(pokemonFilterValue);
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            if (pokemonFilter[i] == undefined) {
                pokemonFilter[i] = {"show": true, "size": "normal"};
            }
        }
	}
}

function initMap() {

	map = L.map('map').setView([{{start_lat}}, {{start_lon}}], {{start_zoom}});

	L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
		attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
		maxZoom: 18
	}).addTo(map);

	const customControlLocation = L.Control.extend({
		options: {
			position: 'topleft'
		},
		onAdd: function (map) {
            let container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

			container.innerHTML = '<a href="#"><img src="/static/svg/location.svg" style="width: 21px; height: 21px; class="center-block;"/></a>';

			container.onclick = function(){
                map.locate({setView: true, maxZoom: 16});
			};
			return container;
		}
	});
	map.addControl(new customControlLocation());

	$('#reset-pokemon-filter').on('click', function(event) {
        const defaultPokemonFilter = [];
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultPokemonFilter[i] = {"show": true, "size": "normal"};
        }
        store('pokemon_filter',JSON.stringify(defaultPokemonFilter));
        pokemonFilterNew = defaultPokemonFilter;

        $('#table-filter-pokemon').DataTable().rows().invalidate('data').draw(false);
    });

    $('#disable-all-filter').on('click', function(event) {
        const defaultPokemonFilter = [];
        let i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            defaultPokemonFilter[i] = {"show": false, "size": pokemonFilterNew[i]["size"]};
        }
        store('pokemon_filter',JSON.stringify(defaultPokemonFilter));
        pokemonFilterNew = defaultPokemonFilter;

        $('#table-filter-pokemon').DataTable().rows().invalidate('data').draw(false);
    });

	$('#saveSettings').on('click', function(event) {


		$(this).toggleClass('active');

        const newShowGyms = $('#show-gyms').hasClass('active')
		const newShowRaids = $('#show-raids').hasClass('active');
		const newShowPokestops = $('#show-pokestops').hasClass('active');
        const newShowQuests= $('#show-quests').hasClass('active');
        const newShowPokemon = $('#show-pokemon').hasClass('active');
        const newShowSpawnpoints = $('#show-spawnpoints').hasClass('active');

        const ts = Math.round((new Date()).getTime() / 1000);

        if (newShowGyms !== showGyms && newShowGyms === false) {
            const newGymMarkers = [];
			$.each(gymMarkers, function (index, gym) {
				if (newShowRaids && gym.raid_end_timestamp >= ts) {
					newGymMarkers.push(gym);
				} else {
					map.removeLayer(gym.marker);
				}
			});

			gymMarkers = newGymMarkers;
		}
        if (newShowPokemon !== showPokemon) {
            $.each(pokemonMarkers, function (index, pokemon) {
                map.removeLayer(pokemon.marker);
            });
            pokemonMarkers = [];
        }
		if (newShowRaids !== showRaids) {
			$.each(gymMarkers, function (index, gym) {
				map.removeLayer(gym.marker);
			});
			gymMarkers = [];
		}
		if (newShowPokestops !== showPokestops && newShowPokestops === false) {
			$.each(pokestopMarkers, function (index, pokestop) {
				map.removeLayer(pokestop.marker);
			});
			pokestopMarkers = [];
		}
        if (newShowRaids !== showRaids) {
            $.each(pokestopMarkers, function (index, pokestop) {
                map.removeLayer(pokestop.marker);
            });
            pokestopMarkers = [];
        }
		if (newShowQuests !== showQuests) {
            $.each(pokestopMarkers, function (index, pokestop) {
                map.removeLayer(pokestop.marker);
            });
            pokestopMarkers = [];
		}
        if (newShowSpawnpoints !== showSpawnpoints && newShowSpawnpoints === false) {
            $.each(spawnpointMarkers, function (index, spawnpoint) {
                map.removeLayer(spawnpoint.marker);
            });
            spawnpointMarkers = [];
        }

        pokemonFilter = pokemonFilterNew;
        const pokemonFilterOld = $.extend(true, {}, pokemonFilter);

        const newPokemonMarkers = [];
        $.each(pokemonMarkers, function (index, pokemon) {
            if ((pokemonFilterOld[pokemon.pokemon_id]["show"] !== pokemonFilter[pokemon.pokemon_id]["show"]) ||
                !(pokemonFilterOld[pokemon.pokemon_id]["size"].localeCompare(pokemonFilter[pokemon.pokemon_id]["size"]))) {

                map.removeLayer(pokemon.marker);
                if (matchesPokemonFilter(pokemon.pokemon_id)) {
                    pokemon.marker = getPokemonMarker(pokemon, ts);
                    newPokemonMarkers.push(pokemon);
                    pokemon.marker.addTo(map);
                }
            } else {
                newPokemonMarkers.push(pokemon);
            }
        });
        pokemonMarkers = newPokemonMarkers;

		showGyms = newShowGyms;
		store('show_gyms', newShowGyms);
		showRaids = newShowRaids;
		store('show_raids', newShowRaids);
		showPokestops = newShowPokestops;
		store('show_pokestops', newShowPokestops);
        showQuests = newShowQuests;
        store('show_quests', newShowQuests);
		showPokemon = newShowPokemon;
		store('show_pokemon', newShowPokemon);
        showSpawnpoints = newShowSpawnpoints;
        store('show_spawnpoints', newShowSpawnpoints);
        store('pokemon_filter',JSON.stringify(pokemonFilter));

		lastUpdateServer = 0;
		loadData();

		$('#settingsModal').modal('hide');
	});

    const customControlSettings = L.Control.extend({
		options: {
			position: 'topleft'
		},
		onAdd: function (map) {
            const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

			container.innerHTML = '<a href="#"><img src="/static/svg/settings.svg" style="width: 21px; height: 21px; class="center-block;"/></a>';

			container.onclick = function(){

				if (retrieve('show_gyms') == 'true') {
                    $('#show-gyms').addClass('active');
                    $('#hide-gyms').removeClass('active');
				} else {
                    $('#hide-gyms').addClass('active');
                    $('#show-gyms').removeClass('active');
				}

                if (retrieve('show_raids') == 'true') {
                    $('#show-raids').addClass('active');
                    $('#hide-raids').removeClass('active');
                } else {
                    $('#hide-raids').addClass('active');
                    $('#show-raids').removeClass('active');
                }

                if (retrieve('show_pokestops') == 'true') {
                    $('#show-pokestops').addClass('active');
                    $('#hide-pokestops').removeClass('active');
                } else {
                    $('#hide-pokestops').addClass('active');
                    $('#show-pokestops').removeClass('active');
                }

                if (retrieve('show_quests') == 'true') {
                    $('#show-quests').addClass('active');
                    $('#hide-quests').removeClass('active');
                } else {
                    $('#hide-quests').addClass('active');
                    $('#show-quests').removeClass('active');
                }

                if (retrieve('show_pokemon') == 'true') {
                    $('#show-pokemon').addClass('active');
                    $('#hide-pokemon').removeClass('active');
                } else {
                    $('#hide-pokemon').addClass('active');
                    $('#show-pokemon').removeClass('active');
                }

                if (retrieve('show_spawnpoints') == 'true') {
                    $('#show-spawnpoints').addClass('active');
                    $('#hide-spawnpoints').removeClass('active');
                } else {
                    $('#hide-spawnpoints').addClass('active');
                    $('#show-spawnpoints').removeClass('active');
                }

				$('#settingsModal').modal('show');
			};

			return container;
		}
	});
	map.addControl(new customControlSettings());

	map.on('zoomend', function() {
		lastUpdateServer = 0;
		loadData();
	});

	map.on('dragend', function() {
		lastUpdateServer = 0;
		loadData();
	});

	loadData();
	setInterval(loadData, 5000);
	setInterval(updateOpenedPopupLoop, 1000);
}

// MARK: - Date Loading

function loadData() {

	if (isLoading || new Date() - lastUpdate < 100) {
		return
	}
	isLoading = true;
	lastUpdate = new Date();

	const bounds = map.getBounds();

    const pokemonFilterExclude = [];
    if (showPokemon) {
    	var i;
        for (i = 1; i <= {{max_pokemon_id}}; i++) {
            if (pokemonFilter[i]["show"] !== true) {
                pokemonFilterExclude.push(i);
            }
        }
    }

    const data = {
        '_': Math.round((new Date()).getTime() / 1000),
		'min_lat': bounds._southWest.lat,
		'max_lat': bounds._northEast.lat,
		'min_lon': bounds._southWest.lng,
		'max_lon': bounds._northEast.lng,
		'show_gyms': showGyms,
		'show_raids': showRaids,
		'show_pokestops': showPokestops,
        'show_quests': showQuests,
        'show_pokemon': showPokemon,
		'pokemon_filter_exclude': JSON.stringify(pokemonFilterExclude),
		'show_spawnpoints': showSpawnpoints,
		'last_update': lastUpdateServer,
	};

	$.ajax({
		url: '/api/get_data',
		data: data,
		success: function (data) {
			const gyms = data.data.gyms;
            let ts = Math.round((new Date()).getTime() / 1000);
			$.each(gyms, function (index, gym) {
				if (showGyms || (showRaids && gym.raid_end_timestamp >= ts)) {
					if (gym.updated > lastUpdateServer) {
						lastUpdateServer = gym.updated;
					}
                    const oldGym = gymMarkers.find(function (value) {
						return gym.id === value.id;
					});

					if (gym.team_id === null) {
						gym.team_id = 0;
					}

					if (oldGym === undefined) {
						const marker = getGymMarker(gym, ts);
						gym.marker = marker;
						gymMarkers.push(gym);
						gym.marker.addTo(map);
						if (gym.raid_end_timestamp >= ts) {
							startRaidTimer(gym, ts);
							gym.raidTimerSet = true;
						} else {
							gym.raidTimerSet = false;
						}
					} else {
						if (
							oldGym.availble_slots !== gym.availble_slots ||
							oldGym.team_id !== gym.team_id ||
							oldGym.raid_end_timestamp != gym.raid_end_timestamp ||
							oldGym.raid_pokemon_id != gym.raid_pokemon_id
						) {
							oldGym.availble_slots = gym.availble_slots;
							oldGym.team_id = gym.team_id;
							oldGym.raid_end_timestamp = gym.raid_end_timestamp;
							oldGym.raid_battle_timestamp = gym.raid_battle_timestamp;
							oldGym.raid_spawn_timestamp = gym.raid_spawn_timestamp;
							oldGym.raid_pokemon_id = gym.raid_pokemon_id;
                            oldGym.raid_pokemon_form = gym.raid_pokemon_form;
                            oldGym.raid_pokemon_cp = gym.raid_pokemon_cp;
                            oldGym.raid_pokemon_move_1 = gym.raid_pokemon_move_1;
                            oldGym.raid_pokemon_move_2 = gym.raid_pokemon_move_2;
							oldGym.raid_level = gym.raid_level;
							oldGym.marker.setIcon(getGymMarkerIcon(oldGym, ts));
							if (oldGym.raid_end_timestamp >= ts && !oldGym.raidTimerSet) {
								startRaidTimer(oldGym, ts);
								oldGym.raidTimerSet = true;
							}
						}
					}
				}
			});

			const pokestops = data.data.pokestops;
			ts = Math.round((new Date()).getTime() / 1000);
            $.each(pokestops, function (index, pokestop) {
                if (showPokestops || (showQuests && pokestop.quest_type !== null)) {

					if (pokestop.updated > lastUpdateServer) {
						lastUpdateServer = pokestop.updated;
					}
                    const oldPokestop = pokestopMarkers.find(function (value) {
						return pokestop.id === value.id;
					});

					if (pokestop.lure_expire_timestamp === null) {
						pokestop.lure_expire_timestamp = 0;
					}

					if (oldPokestop === undefined) {
						pokestop.marker = getPokestopMarker(pokestop, ts);
						pokestopMarkers.push(pokestop);
                        pokestop.marker.addTo(map);
						if (pokestop.lure_expire_timestamp >= ts) {
							pokestop.willUpdate = true;
							startPokestopTimer(pokestop, ts)
						} else {
							pokestop.willUpdate = false
						}
					} else {
						if (oldPokestop.lure_expire_timestamp !== pokestop.lure_expire_timestamp) {
							oldPokestop.lure_expire_timestamp = pokestop.lure_expire_timestamp;
							oldPokestop.marker.setIcon(getPokestopMarkerIcon(pokestop, ts));
						}
						if (oldPokestop.willUpdate === false && oldPokestop.lure_expire_timestamp >= ts) {
							oldPokestop.willUpdate = true;
							startPokestopTimer(oldPokestop, ts)
						}
					}
				}


			});

			const pokemon = data.data.pokemon;
            ts = Math.round((new Date()).getTime() / 1000);
            $.each(pokemon, function (index, pokemon) {
				if (showPokemon && pokemon.expire_timestamp >= ts && matchesPokemonFilter(pokemon.pokemon_id)) {
					if (pokemon.updated > lastUpdateServer) {
						lastUpdateServer = pokemon.updated;
					}
                    const oldPokemon = pokemonMarkers.find(function (value) {
						return pokemon.id === value.id;
					});

					if (oldPokemon === undefined) {
						if (pokemon.pokestop_id !== null && pokemon.spawn_id === null) {
							var latOffset = Math.random() * 0.0002 - 0.0001;
							if (latOffset >= 0) {
								latOffset += 0.00005;
							} else {
								latOffset -= 0.00005;
							}
							var lonOffset = Math.random() * 0.0002 - 0.0001;
							if (lonOffset >= 0) {
								lonOffset += 0.00005;
							} else {
								lonOffset -= 0.00005;
							}
							pokemon.lat += latOffset;
							pokemon.lon += + lonOffset;
						}

						pokemon.marker = getPokemonMarker(pokemon, ts);
						pokemonMarkers.push(pokemon);
						startDespawnTimer(pokemon, ts);
                        pokemon.marker.addTo(map);
					} else {
						if (oldPokemon.expire_timestamp !== pokemon.expire_timestamp){
							oldPokemon.expire_timestamp = pokemon.expire_timestamp;
						}
                        if (oldPokemon.atk_iv !== pokemon.atk_iv){
                            oldPokemon.atk_iv = pokemon.atk_iv
                            oldPokemon.def_iv = pokemon.def_iv
                            oldPokemon.sta_iv = pokemon.sta_iv
                            oldPokemon.cp = pokemon.cp
                            oldPokemon.weight = pokemon.weight
                            oldPokemon.size = pokemon.size
                            oldPokemon.move_1 = pokemon.move_1
                            oldPokemon.move_2 = pokemon.move_2
                            oldPokemon.level = pokemon.level
						}
                        if (oldPokemon.updated !== pokemon.updated){
                            oldPokemon.updated = pokemon.updated;
                        }
					}
				}


			});

            const spawnpoints = data.data.spawnpoints;
            $.each(spawnpoints, function (index, spawnpoint) {
                if (showSpawnpoints) {
                    if (spawnpoint.updated > lastUpdateServer) {
                        lastUpdateServer = spawnpoint.updated;
                    }
                    var oldSpawnpoint = spawnpointMarkers.find(function (value) {
                        return spawnpoint.lat === value.lat && spawnpoint.lon === value.lon;
                    });

                    if (oldSpawnpoint === undefined) {
                        spawnpoint.marker = getSpawnpointMarker(spawnpoint, ts);
                        spawnpointMarkers.push(spawnpoint);
                        spawnpoint.marker.addTo(map);
                    }
                }


            });

            lastUpdate = new Date();
			isLoading = false;
		}
	});
}

// MARK: - Filters

function matchesPokemonFilter(pokemonId) {
	return pokemonFilter[pokemonId]["show"];
}

function getPokemonSize(pokemonId) {
    const size = pokemonFilter[pokemonId]["size"];
    if (size === "small") {
    	return 30;
	} else if (size === "large") {
    	return 55;
    } else if (size === "huge") {
        return 75;
    } else {
    	return 40;
	}
}

function getPokemonIndex(pokemonId) {
    const size = pokemonFilter[pokemonId]["size"];
    if (size === "small") {
        return 1;
    } else if (size === "large") {
        return 3;
    } else if (size === "huge") {
        return 4;
    } else {
        return 2;
    }
}

// MARK: - Local Storage

function store(name, value) {
    localStorage.setItem(name, value);
}

function retrieve(name) {
    return localStorage.getItem(name);
}

// MARK: - Timers

function startDespawnTimer(pokemon, ts) {
	setTimeout(
		function() {
            const ts2 = Math.round((new Date()).getTime() / 1000);
            const realPokemon = pokemonMarkers.find(function (value) {
				return pokemon.id === value.id;
			});
			if (realPokemon === undefined) {
				return;
			}
			if (ts2 +1 >= realPokemon.expire_timestamp) {
				pokemonMarkers = pokemonMarkers.filter(function( obj ) {
					return obj.id !== realPokemon.id;
				});
			} else {
				return startDespawnTimer(realPokemon, ts2);
			}

			map.removeLayer(realPokemon.marker);
		}, (pokemon.expire_timestamp - ts) * 1000);
}

function startRaidTimer(gym, ts) {
	setTimeout(
		function() {
			const ts2 = Math.round((new Date()).getTime() / 1000);
            const realGym = gymMarkers.find(function (value) {
				return gym.id === value.id;
			});
			if (realGym === undefined) {
				return;
			}
			realGym.raidTimerSet = false;

			if (!showGyms) {
				gymMarkers = gymMarkers.filter(function( obj ) {
					return obj.id !== realGym.id;
				});
				map.removeLayer(realGym.marker);
			} else {
				realGym.marker.setIcon(getGymMarkerIcon(realGym, ts2 + 1));
			}

		}, (gym.raid_end_timestamp - ts) * 1000);

	setTimeout(
		function() {
            const ts2 = Math.round((new Date()).getTime() / 1000);
            const realGym = gymMarkers.find(function (value) {
				return gym.id === value.id;
			});
			if (realGym === undefined) {
				return;
			}
			realGym.marker.setIcon(getGymMarkerIcon(realGym, ts2 + 1));
		}, (gym.raid_battle_timestamp - ts) * 1000);
}

function startPokestopTimer(pokestop, ts) {
    setTimeout(
		function() {
            const ts2 = Math.round((new Date()).getTime() / 1000);
            const realPokestop = pokestopMarkers.find(function (value) {
				return pokestop.id === value.id;
			});
			if (realPokestop === undefined) {
				return;
			}
			if (pokestop.lure_expire_timestamp - 10 >= ts2) {
                startPokestopTimer(realPokestop, ts2);
			} else {
                realPokestop.willUpdate = false;
				realPokestop.marker.setIcon(getPokestopMarkerIcon(realPokestop, ts2 + 10));
			}
		}, (pokestop.lure_expire_timestamp - ts) * 1000);
}

// MARK: - Popups

function updateOpenedPopupLoop() {
	if (openedPokemon !== undefined) {
		openedPokemon.marker._popup.setContent(getPokemonPopupContent(openedPokemon));
	}
	if (openedPokestop !== undefined) {
		openedPokestop.marker._popup.setContent(getPokestopPopupContent(openedPokestop));
	}
	if (openedGym !== undefined) {
		openedGym.marker._popup.setContent(getGymPopupContent(openedGym));
	}
}

function getPokemonPopupContent(pokemon) {
	const despawnDate = new Date(pokemon.expire_timestamp * 1000);

    let content = '';

    let pokemonName;
    if (pokemon.form !== 0 && pokemon.form !== null) {
        pokemonName = getFormName(pokemon.form) + ' ' + getPokemonName(pokemon.pokemon_id);
    } else {
        pokemonName = getPokemonName(pokemon.pokemon_id);
    }

	content += '<b>'+pokemonName+'</b><br>';

    if (pokemon.atk_iv !== null) {
        const ivPercent = Math.round( (pokemon.atk_iv + pokemon.def_iv + pokemon.sta_iv) / 45 * 1000 ) / 10;
        content += 'IV: ' + ivPercent + '% (' + pokemon.atk_iv + '|' + pokemon.def_iv + '|' + pokemon.sta_iv + ')<br>';
    }
    if (pokemon.cp !== null) {
        content += 'CP: ' + pokemon.cp + ' (' + pokemon.level + ')<br>';
    }

	if (pokemon.expire_timestamp_true) {
		content += 'Despawn Time: '
	} else {
		content += 'Aprox. Despawn Time: '
	}
    content += despawnDate.toLocaleTimeString() + ' (' + getTimeUntill(despawnDate) + ')<br>';

    if (pokemon.weather !== 0 && pokemon.weather !== null) {
        content += 'Weather: ' + getWeatherName(pokemon.weather) + '<br>';
    }

    if (pokemon.first_seen_timestamp !== 0 && pokemon.first_seen_timestamp !== undefined) {
        const firstSeenDate = new Date(pokemon.first_seen_timestamp * 1000);
        content += 'First Seen at: ' + firstSeenDate.toLocaleTimeString() + '<br>';
    }
    if (pokemon.updated !== 0 && pokemon.updated !== null) {
        const updatedDate = new Date(pokemon.updated * 1000);
        content += 'Latest Seen at: ' + updatedDate.toLocaleTimeString() + '<br>';
    }

	return content
}

function getPokestopPopupContent(pokestop) {
	const now = new Date();
    const lureExpireDate = new Date(pokestop.lure_expire_timestamp * 1000);

	let content = '';
	if (pokestop.name === null) {
		content += '<b>Unknown Pokestop Name</b><br>';
	} else {
		content += '<b>'+pokestop.name+'</b><br>';
	}

	if (lureExpireDate >= now) {
		content += 'Lure End Time: ' + lureExpireDate.toLocaleTimeString() + ' (' + getTimeUntill(lureExpireDate) + ')';
	}

	if (pokestop.quest_type !== null) {
	    let conditions = pokestop.quest_conditions;
        let conditionsString = '';
        if (conditions !== undefined && conditions.length > 0) {
            conditionsString += ' (';
            $.each(conditions, function (index, condition) {
                let formating
                if (index === 0) {
                    formating = '';
                } else {
                    formating = ', ';
                }

                conditionsString += formating + getQuestCondition(condition);
            });
            conditionsString += ')';
        }

        content += 'Quest Condition: ' + getQuestName(pokestop.quest_type, pokestop.quest_target) + conditionsString + '<br>';

        $.each(pokestop.quest_rewards, function (index, reward) {
            content += 'Quest Reward: ' + getQuestReward(reward) + '<br>';
        });

    }

	return content;

}

function getGymPopupContent(gym) {
	const now = new Date();
	const raidBattleDate = new Date(gym.raid_battle_timestamp*1000);
	const raidEndDate = new Date(gym.raid_end_timestamp*1000);

	let content = '';
	if (gym.name === null) {
		content += '<b>Unknown Gym Name</b><br>';
	} else {
		content += '<b>'+gym.name+'</b><br>';
	}

    if (gym.ex_raid_eligible === true) {
        content += 'Gym is EX-Raid eligible<br>';
    }
    if (gym.in_battle === true) {
        content += 'Gym is under attack!<br>';
    }

    const isRaid = raidEndDate >= now && parseInt(gym.raid_level) > 0;
    const isRaidBattle = raidBattleDate <= now && isRaid;

	if (isRaid && gym.raid_pokemon_id !== 0 && gym.raid_pokemon_id !== null) {
        let pokemonName;
        if (gym.raid_pokemon_form !== 0 && gym.raid_pokemon_form !== null) {
            pokemonName = getFormName(gym.raid_pokemon_form) + ' ' + getPokemonName(gym.raid_pokemon_id);
        } else {
            pokemonName = getPokemonName(gym.raid_pokemon_id);
        }
		content += "Raid Boss: " + pokemonName + '<br>';
	} else if (isRaidBattle) {
		content += "Raid Boss: Unknown Raid Boss<br>";
	}
    if (isRaid && gym.raid_pokemon_move_1 !== 0 && gym.raid_pokemon_move_1 !== null && isRaid &&
        gym.raid_pokemon_move_2 !== 0 && gym.raid_pokemon_move_2 !== null) {
        content += "Raid Moves: " + getMoveName(gym.raid_pokemon_move_1) + ' | ' + getMoveName(gym.raid_pokemon_move_2) + '<br>';
    }
    if (isRaid && gym.raid_pokemon_cp !== 0 && gym.raid_pokemon_cp !== null) {
        content += "Raid CP: " + gym.raid_pokemon_cp + '<br>';
    }
	if (isRaid) {
		content += "Raid Level: " + gym.raid_level + '<br>';
	}
	if (isRaid && !isRaidBattle) {
		content += "Raid Start: " + raidBattleDate.toLocaleTimeString() + ' ('+getTimeUntill(raidBattleDate)+')<br>';
	}
	if (isRaid) {
		content += "Raid End: " + raidEndDate.toLocaleTimeString() + ' ('+getTimeUntill(raidEndDate)+')<br>';
	}

	return content;
}

// MARK: - Translation

function getPokemonNameNoId(pokemonId) {
    return i18n('poke_'+pokemonId);
}

function getPokemonName(pokemonId) {
	return i18n('poke_'+pokemonId) + ' (' + pokemonId + ')';
}

function getThrowType(typeID) {
    return i18n('throw_type_'+typeID);
}

function getPokemonType(typeId) {
    return i18n('poke_type_'+typeId);
}

function getFormName(formId) {
    return i18n('form_'+formId);
}

function getMoveName(moveId) {
    return i18n('move_'+moveId);
}

function getWeatherName(weatherId) {
    return i18n('weather_'+weatherId);
}

function getQuestName(questId, amount) {
    return i18n('quest_'+questId, {"amount": amount});
}

function getItemName(itemId) {
    return i18n('item_'+itemId);
}

function getQuestReward(reward) {
    const id = reward.type;
    const info = reward.info;

    if (id === 1 && info !== undefined && info.amount !== undefined) {
        return i18n('quest_reward_1_formated', {'amount': info.amount});
    } else if (id === 2 && info !== undefined && info.amount !== undefined && info.item_id !== undefined) {
        return i18n('quest_reward_2_formated', {'amount': info.amount, 'item': getItemName(info.item_id)});
    } else if (id === 3 && info !== undefined && info.amount !== undefined) {
        return i18n('quest_reward_3_formated', {'amount': info.amount});
    } else if (id === 4 && info !== undefined && info.amount !== undefined && info.pokemon_id !== undefined) {
        return i18n('quest_reward_4_formated', {'amount': info.amount, 'pokemon': getPokemonName(info.pokemon_id)});
    } else if (id === 7 && info !== undefined && info.pokemon_id !== undefined) {
        return i18n('quest_reward_7_formated', {'pokemon': getPokemonName(info.pokemon_id)});
    } else {
        return i18n('quest_reward_'+id);
    }
}

function getQuestCondition(condition) {

    const id = condition.type;
    const info = condition.info;

    if (id === 1 && info !== undefined && info.pokemon_type_ids !== undefined) {
        let typesString = '';
        $.each(info.pokemon_type_ids, function (index, typeId) {
            let formatted;
            if (index === 0) {
                formatted = '';
            } else if (index === info.pokemon_type_ids.length - 1) {
                formatted = ' or ';
            } else {
                formatted = ', ';
            }
            typesString += formatted + getPokemonType(typeId);
        });
        return i18n('quest_condition_1_formated', {'types': typesString});
    } else if (id === 2 && info !== undefined && info.pokemon_ids !== undefined) {
        let pokemonString = '';
        $.each(info.pokemon_ids, function (index, pokemonId) {
            let formatted;
            if (index === 0) {
                formatted = '';
            } else if (index === info.pokemon_ids.length - 1) {
                formatted = ' or ';
            } else {
                formatted = ', ';
            }
            pokemonString += formatted + getPokemonNameNoId(pokemonId);
        });
        return i18n('quest_condition_2_formated', {'pokemon': pokemonString});
    } else if (id === 7 && info !== undefined && info.raid_levels !== undefined) {
        let levelsString = '';
        $.each(info.raid_levels, function (index, level) {
            let formatted;
            if (index === 0) {
                formatted = '';
            } else if (index === info.raid_levels.length - 1) {
                formatted = ' or ';
            } else {
                formatted = ', ';
            }
            levelsString += formatted + level;
        });
        return i18n('quest_condition_7_formated', {'levels': levelsString});
    } else if (id === 8 && info !== undefined && info.throw_type_id !== undefined) {
        return i18n('quest_condition_8_formated', {'throw_type': getThrowType(info.throw_type_id)});
    } else if (id === 11 && info !== undefined && info.item_id !== undefined) {
        return i18n('quest_condition_11_formated', {'item': getItemName(info.item_id)});
    } else if (id === 14 && info !== undefined && info.throw_type_id !== undefined) {
        return i18n('quest_condition_14_formated', {'throw_type': getThrowType(info.throw_type_id)});
    } else {
        return i18n('quest_condition_'+id);
    }

}

// MARK: - Markers

function getPokemonMarkerIcon(pokemon, ts) {
	const size = getPokemonSize(pokemon.pokemon_id);

    let pokemonIdString;
    if (pokemon.form !== 0 && pokemon.form !== null) {
        const pokemonIdStringTmp = '' + pokemon.pokemon_id + '-' + pokemon.form;
        if ($.inArray(pokemonIdStringTmp, avilableForms) !== -1) {
            pokemonIdString = pokemonIdStringTmp;
        } else {
            pokemonIdString = '' + pokemon.pokemon_id;
        }
    } else {
        pokemonIdString = '' + pokemon.pokemon_id;
    }

    const icon = L.icon({
        iconUrl: 		'static/img/pokemon/' + pokemonIdString + '.png',
        iconSize:    	[size, size],
        iconAnchor:   	[size/2, size/2],
        popupAnchor:  	[0, -(size/2)]
    });
    return icon;
}

function getPokemonMarker(pokemon, ts) {
    const marker = L.marker([pokemon.lat, pokemon.lon], {
        icon: getPokemonMarkerIcon(pokemon, ts),
        forceZIndex: 40 + getPokemonIndex(pokemon.pokemon_id)
    });
    marker.bindPopup('');
    marker.on('popupopen', function (popup) {
        openedPokemon = pokemon;
        marker._popup.setContent(getPokemonPopupContent(pokemon));
    });
    return marker;
}

function getPokestopMarkerIcon(pokestop, ts) {
	let icon;
	if (showQuests && pokestop.quest_type !== null && pokestop.quest_rewards[0] !== undefined) {

        const id = pokestop.quest_rewards[0].type;
        const info = pokestop.quest_rewards[0].info;

        let rewardString;

        if (id === 1 && info !== undefined && info.amount !== undefined) {
            rewardString = "i-2";
        } else if (id === 2 && info !== undefined && info.amount !== undefined && info.item_id !== undefined) {
            rewardString = "i"+info.item_id;
        } else if (id === 3 && info !== undefined && info.amount !== undefined) {
            rewardString = "i-1";
        } else if (id === 4 && info !== undefined && info.amount !== undefined && info.pokemon_id !== undefined) {
            rewardString = "i-3";
        } else if (id === 7 && info !== undefined && info.pokemon_id !== undefined) {
            rewardString = "p"+info.pokemon_id;
        } else {
            rewardString = "i0";
        }
        if (pokestop.lure_expire_timestamp >= ts) {
            icon = L.icon({
                iconUrl: 'static/img/quest/1_' + rewardString + '.png',
                iconSize: 		[30, 50],
                iconAnchor: 	[15, 47],
                popupAnchor: 	[0, -47]
            });
        } else {
            icon = L.icon({
                iconUrl: 'static/img/quest/0_'+ rewardString +'.png',
                iconSize: 		[30, 50],
                iconAnchor: 	[15, 47],
                popupAnchor: 	[0, -47]
            });
        }
    } else {
        if (pokestop.lure_expire_timestamp >= ts) {
            icon = L.icon({
                iconUrl: 'static/img/pokestop/1.png',
                iconSize: [30, 30],
                iconAnchor: [15, 27],
                popupAnchor: [0, -27]
            });
        } else {
            icon = L.icon({
                iconUrl: 'static/img/pokestop/0.png',
                iconSize: [30, 30],
                iconAnchor: [15, 27],
                popupAnchor: [0, -27]
            });
        }
    }
	return icon;
}

function getPokestopMarker(pokestop, ts) {

    let zIndex;
    if (showQuests && pokestop.quest_type !== null) {
        zIndex = 1;
    } else {
        zIndex = 0;
    }
    const marker = L.marker([pokestop.lat, pokestop.lon], {
        icon: getPokestopMarkerIcon(pokestop, ts),
        forceZIndex: 20 + zIndex
    });
    marker.bindPopup(pokestop.name);
    marker.on('popupopen', function (popup) {
        openedPokestop = pokestop;
        marker._popup.setContent(getPokestopPopupContent(pokestop));
    });
    return marker;
}

function getSpawnpointMarkerIcon(spawnpoint, ts) {
    const icon = L.icon({
        iconUrl:		'static/img/spawnpoint/0.png',
        iconSize:		[10, 10],
        iconAnchor:		[5, 5],
        popupAnchor:	[0, -5]
    });
    return icon
}

function getSpawnpointMarker(spawnpoint, ts) {
    const marker = L.marker([spawnpoint.lat, spawnpoint.lon], {
        icon: getSpawnpointMarkerIcon(spawnpoint, ts),
        forceZIndex: 10
    });
    marker.bindPopup('<b>Spawnpoint</b>');
    return marker;
}

function getGymMarkerIcon(gym, ts) {
    let size;
    if (gym.availble_slots === 6 || gym.team_id === 0) {
        size = 0;
    } else {
        size = (6 - gym.availble_slots);
    }

    let icon;
    if (gym.raid_battle_timestamp <= ts && gym.raid_end_timestamp >= ts && showRaids && parseInt(gym.raid_level) > 0) {
        if (gym.raid_pokemon_id !== 0 && gym.raid_pokemon_id !== null) {

        	let pokemonIdString;
        	if (gym.raid_pokemon_form !== 0 && gym.raid_pokemon_form !== null) {
        		const pokemonIdStringTmp = '' + gym.raid_pokemon_id + '-' + gym.raid_pokemon_form;
        		if ($.inArray(pokemonIdStringTmp, avilableForms) !== -1) {
                    pokemonIdString = pokemonIdStringTmp;
				} else {
                    pokemonIdString = '' + gym.raid_pokemon_id;
                }
			} else {
        		pokemonIdString = '' + gym.raid_pokemon_id;
			}

            icon = L.icon({
                iconUrl: 		'static/img/raid/'+ gym.team_id + '_' + size + '_' + pokemonIdString+ '.png',
                iconSize: 		[40, 67],
                iconAnchor: 	[20, 47],
                popupAnchor: 	[0, -47]
            });
        } else {
            icon = L.icon({
                iconUrl: 		'static/img/raid/'+ gym.team_id + '_' + size + '_ue' + gym.raid_level + '.png',
                iconSize: 		[40, 67],
                iconAnchor: 	[20, 47],
                popupAnchor: 	[0, -47]
            });
        }
    } else if (gym.raid_end_timestamp >= ts && parseInt(gym.raid_level) > 0 && showRaids) {
        icon = L.icon({
            iconUrl: 		'static/img/raid/'+ gym.team_id + '_' + size + '_e' + gym.raid_level + '.png',
            iconSize: 		[40, 67],
            iconAnchor: 	[20, 47],
            popupAnchor: 	[0, -47]
        });
    } else {
    	icon = L.icon({
            iconUrl: 		'static/img/gym/'+ gym.team_id + '_' + size +'.png',
            iconSize:     	[40, 40],
            iconAnchor:   	[20, 20],
            popupAnchor:  	[0, -20]
        });
    }
    return icon;
}

function getGymMarker(gym, ts) {

	let zIndex;
    if (showRaids && gym.raid_end_timestamp >= ts) {
        zIndex = gym.raid_level
    } else {
        zIndex = 0
    }

    const marker = L.marker([gym.lat, gym.lon], {
        icon: getGymMarkerIcon(gym, ts),
        forceZIndex: 30 + zIndex
    });
    marker.bindPopup(gym.name);
    marker.on('popupopen', function (popup) {
        openedGym = gym;
        marker._popup.setContent(getGymPopupContent(gym));
    });

    return marker

}

// MARK: - Misc

function manageSelectButton(e, isNew) {
    const id = e.attr('data-id');
    const type = e.attr('data-type');
    const info = e.attr('data-info');
    if (type === "pokemon") {
        var shouldShow = false;
        switch (info) {
            case "hide":
                shouldShow = !pokemonFilterNew[id]["show"];
                break;
            case "show":
                shouldShow = pokemonFilterNew[id]["show"];
                break;
            case "small":
                shouldShow = pokemonFilterNew[id]["size"] === "small";
                break;
            case "normal":
                shouldShow = pokemonFilterNew[id]["size"] === "normal";
                break;
            case "large":
                shouldShow = pokemonFilterNew[id]["size"] === "large";
                break;
            case "huge":
                shouldShow = pokemonFilterNew[id]["size"] === "huge";
                break;
        }
        if (shouldShow) {
            e.addClass("active");
        } else {
            e.removeClass("active");
        }
    }

    if (isNew) {
        e.removeClass("select-button-new");
        e.addClass("select-button");
        e.on('click', function (e) {
            e.preventDefault();
            if (type === "pokemon") {
                switch (info) {
                    case "hide":
                        pokemonFilterNew[id]["show"] = false;
                        break;
                    case "show":
                        pokemonFilterNew[id]["show"] = true;
                        break;
                    case "small":
                        pokemonFilterNew[id]["size"] = "small";
                        break;
                    case "normal":
                        pokemonFilterNew[id]["size"] = "normal";
                        break;
                    case "large":
                        pokemonFilterNew[id]["size"] = "large";
                        break;
                    case "huge":
                        pokemonFilterNew[id]["size"] = "huge";
                        break;
                }
            }

        })
    }
}

function getTimeUntill(date) {
    const diff = Math.round((date - new Date()) / 1000);
    const h = Math.floor(diff / 3600);
    const m = Math.floor(diff % 3600 / 60);
    const s = Math.floor(diff % 3600 % 60);

    var str = '';
    if (h > 0) {
        str = h + 'h ' + m + 'm ' + s + 's';
    } else if (m > 0) {
        str = m + 'm ' + s + 's';
    } else {
        str = s + 's';
    }

    return str;
}
